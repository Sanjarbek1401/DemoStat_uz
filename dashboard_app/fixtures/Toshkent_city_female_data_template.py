import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Toshkent Shahri', defaults={'svg_id': 'tashkent_city'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "1459322",
    "2022": "1488689",
    "2023": "1518431",
    "2024": "1548295",
    "2025": "1578231",
    "2026": "1608115",
    "2027": "1637819",
    "2028": "1667356",
    "2029": "1696574",
    "2030": "1725298",
    "2031": "1753368",
    "2032": "1780673",
    "2033": "1807128",
    "2034": "1832606",
    "2035": "1857213",
    "2036": "1880954",
    "2037": "1903994",
    "2038": "1926415",
    "2039": "1948350",
    "2040": "1969996",
    "2041": "1991605",
    "2042": "2013358",
    "2043": "2035358",
    "2044": "2057677",
    "2045": "2080420",
    "2046": "2103607",
    "2047": "2127230",
    "2048": "2151280",
    "2049": "2175697",
    "2050": "2200398",
    "Age": "Total"
  },
  {
    "2021": "131689",
    "2022": "139995",
    "2023": "147639",
    "2024": "153601",
    "2025": "157929",
    "2026": "159224",
    "2027": "160404",
    "2028": "161129",
    "2029": "161499",
    "2030": "161368",
    "2031": "160670",
    "2032": "159395",
    "2033": "157425",
    "2034": "154785",
    "2035": "151747",
    "2036": "148498",
    "2037": "145308",
    "2038": "142327",
    "2039": "139838",
    "2040": "137921",
    "2041": "136820",
    "2042": "136560",
    "2043": "137162",
    "2044": "138564",
    "2045": "140679",
    "2046": "143266",
    "2047": "146136",
    "2048": "149189",
    "2049": "152295",
    "2050": "155266",
    "Age": "0-4"
  },
  {
    "2021": "112055",
    "2022": "114136",
    "2023": "116916",
    "2024": "120313",
    "2025": "125243",
    "2026": "132795",
    "2027": "141032",
    "2028": "148618",
    "2029": "154542",
    "2030": "158860",
    "2031": "160171",
    "2032": "161376",
    "2033": "162126",
    "2034": "162524",
    "2035": "162424",
    "2036": "161763",
    "2037": "160533",
    "2038": "158617",
    "2039": "156039",
    "2040": "153068",
    "2041": "149890",
    "2042": "146770",
    "2043": "143856",
    "2044": "141428",
    "2045": "139564",
    "2046": "138504",
    "2047": "138273",
    "2048": "138894",
    "2049": "140303",
    "2050": "142417",
    "Age": "5-9"
  },
  {
    "2021": "111964",
    "2022": "111584",
    "2023": "109722",
    "2024": "108485",
    "2025": "109974",
    "2026": "113025",
    "2027": "115116",
    "2028": "117899",
    "2029": "121285",
    "2030": "126181",
    "2031": "133677",
    "2032": "141849",
    "2033": "149379",
    "2034": "155264",
    "2035": "159562",
    "2036": "160875",
    "2037": "162089",
    "2038": "162854",
    "2039": "163272",
    "2040": "163199",
    "2041": "162572",
    "2042": "161384",
    "2043": "159517",
    "2044": "156994",
    "2045": "154081",
    "2046": "150960",
    "2047": "147893",
    "2048": "145028",
    "2049": "142643",
    "2050": "140812",
    "Age": "10-14"
  },
  {
    "2021": "93913",
    "2022": "97784",
    "2023": "103910",
    "2024": "108941",
    "2025": "112090",
    "2026": "112679",
    "2027": "112324",
    "2028": "110509",
    "2029": "109326",
    "2030": "110843",
    "2031": "113894",
    "2032": "115977",
    "2033": "118745",
    "2034": "122110",
    "2035": "126973",
    "2036": "134416",
    "2037": "142523",
    "2038": "149987",
    "2039": "155819",
    "2040": "160087",
    "2041": "161402",
    "2042": "162634",
    "2043": "163422",
    "2044": "163867",
    "2045": "163826",
    "2046": "163235",
    "2047": "162086",
    "2048": "160261",
    "2049": "157784",
    "2050": "154919",
    "Age": "15-19"
  },
  {
    "2021": "94432",
    "2022": "94461",
    "2023": "94972",
    "2024": "97235",
    "2025": "98598",
    "2026": "101689",
    "2027": "105549",
    "2028": "111580",
    "2029": "116482",
    "2030": "119513",
    "2031": "120063",
    "2032": "119796",
    "2033": "118189",
    "2034": "117214",
    "2035": "118797",
    "2036": "121793",
    "2037": "123797",
    "2038": "126501",
    "2039": "129810",
    "2040": "134584",
    "2041": "141852",
    "2042": "149700",
    "2043": "156899",
    "2044": "162527",
    "2045": "166703",
    "2046": "168041",
    "2047": "169342",
    "2048": "170204",
    "2049": "170732",
    "2050": "170781",
    "Age": "20-24"
  },
  {
    "2021": "108357",
    "2022": "108215",
    "2023": "107942",
    "2024": "107545",
    "2025": "106802",
    "2026": "106237",
    "2027": "106580",
    "2028": "107302",
    "2029": "109679",
    "2030": "111093",
    "2031": "114145",
    "2032": "117837",
    "2033": "123606",
    "2034": "128282",
    "2035": "131245",
    "2036": "131881",
    "2037": "131780",
    "2038": "130361",
    "2039": "129507",
    "2040": "131097",
    "2041": "134056",
    "2042": "136051",
    "2043": "138739",
    "2044": "141973",
    "2045": "146571",
    "2046": "153554",
    "2047": "161094",
    "2048": "168044",
    "2049": "173510",
    "2050": "177624",
    "Age": "25-29"
  },
  {
    "2021": "118904",
    "2022": "116366",
    "2023": "114791",
    "2024": "114329",
    "2025": "114626",
    "2026": "114497",
    "2027": "114568",
    "2028": "114500",
    "2029": "114293",
    "2030": "113728",
    "2031": "113309",
    "2032": "113750",
    "2033": "114514",
    "2034": "116882",
    "2035": "118268",
    "2036": "121246",
    "2037": "124802",
    "2038": "130393",
    "2039": "134937",
    "2040": "137873",
    "2041": "138578",
    "2042": "138599",
    "2043": "137326",
    "2044": "136588",
    "2045": "138222",
    "2046": "141187",
    "2047": "143189",
    "2048": "145862",
    "2049": "149040",
    "2050": "153515",
    "Age": "30-34"
  },
  {
    "2021": "118228",
    "2022": "122098",
    "2023": "124522",
    "2024": "124228",
    "2025": "122323",
    "2026": "121496",
    "2027": "119173",
    "2028": "117790",
    "2029": "117469",
    "2030": "117873",
    "2031": "117841",
    "2032": "118003",
    "2033": "118022",
    "2034": "117899",
    "2035": "117416",
    "2036": "117062",
    "2037": "117545",
    "2038": "118323",
    "2039": "120680",
    "2040": "122053",
    "2041": "124995",
    "2042": "128480",
    "2043": "133972",
    "2044": "138447",
    "2045": "141384",
    "2046": "142153",
    "2047": "142270",
    "2048": "141101",
    "2049": "140438",
    "2050": "142085",
    "Age": "35-39"
  },
  {
    "2021": "99421",
    "2022": "102793",
    "2023": "105399",
    "2024": "109452",
    "2025": "114570",
    "2026": "118698",
    "2027": "122530",
    "2028": "124971",
    "2029": "124768",
    "2030": "122986",
    "2031": "122273",
    "2032": "120073",
    "2033": "118791",
    "2034": "118534",
    "2035": "118978",
    "2036": "118987",
    "2037": "119193",
    "2038": "119259",
    "2039": "119190",
    "2040": "118764",
    "2041": "118464",
    "2042": "118990",
    "2043": "119794",
    "2044": "122159",
    "2045": "123539",
    "2046": "126466",
    "2047": "129907",
    "2048": "135328",
    "2049": "139749",
    "2050": "142675",
    "Age": "40-44"
  },
  {
    "2021": "88914",
    "2022": "89802",
    "2023": "91967",
    "2024": "96164",
    "2025": "98369",
    "2026": "99299",
    "2027": "102643",
    "2028": "105217",
    "2029": "109214",
    "2030": "114257",
    "2031": "118325",
    "2032": "122116",
    "2033": "124550",
    "2034": "124395",
    "2035": "122691",
    "2036": "122047",
    "2037": "119931",
    "2038": "118718",
    "2039": "118507",
    "2040": "118987",
    "2041": "119036",
    "2042": "119284",
    "2043": "119396",
    "2044": "119376",
    "2045": "119005",
    "2046": "118753",
    "2047": "119313",
    "2048": "120134",
    "2049": "122499",
    "2050": "123877",
    "Age": "45-49"
  },
  {
    "2021": "85470",
    "2022": "87745",
    "2023": "87844",
    "2024": "86554",
    "2025": "86667",
    "2026": "88211",
    "2027": "89109",
    "2028": "91254",
    "2029": "95389",
    "2030": "97575",
    "2031": "98512",
    "2032": "101822",
    "2033": "104361",
    "2034": "108297",
    "2035": "113262",
    "2036": "117262",
    "2037": "121004",
    "2038": "123420",
    "2039": "123305",
    "2040": "121677",
    "2041": "121099",
    "2042": "119072",
    "2043": "117932",
    "2044": "117772",
    "2045": "118290",
    "2046": "118381",
    "2047": "118667",
    "2048": "118814",
    "2049": "118830",
    "2050": "118500",
    "Age": "50-54"
  },
  {
    "2021": "76625",
    "2022": "75663",
    "2023": "77146",
    "2024": "78375",
    "2025": "81250",
    "2026": "83946",
    "2027": "86180",
    "2028": "86315",
    "2029": "85095",
    "2030": "85262",
    "2031": "86824",
    "2032": "87738",
    "2033": "89856",
    "2034": "93900",
    "2035": "96058",
    "2036": "97002",
    "2037": "100263",
    "2038": "102761",
    "2039": "106628",
    "2040": "111505",
    "2041": "115431",
    "2042": "119119",
    "2043": "121513",
    "2044": "121446",
    "2045": "119915",
    "2046": "119416",
    "2047": "117495",
    "2048": "116435",
    "2049": "116325",
    "2050": "116879",
    "Age": "55-59"
  },
  {
    "2021": "72648",
    "2022": "73037",
    "2023": "74250",
    "2024": "74540",
    "2025": "74441",
    "2026": "73554",
    "2027": "72693",
    "2028": "74179",
    "2029": "75404",
    "2030": "78208",
    "2031": "80828",
    "2032": "83004",
    "2033": "83186",
    "2034": "82056",
    "2035": "82294",
    "2036": "83875",
    "2037": "84808",
    "2038": "86892",
    "2039": "90810",
    "2040": "92934",
    "2041": "93900",
    "2042": "97101",
    "2043": "99556",
    "2044": "103341",
    "2045": "108108",
    "2046": "111938",
    "2047": "115555",
    "2048": "117908",
    "2049": "117895",
    "2050": "116481",
    "Age": "60-64"
  },
  {
    "2021": "56148",
    "2022": "59147",
    "2023": "60826",
    "2024": "62702",
    "2025": "64595",
    "2026": "67238",
    "2027": "67675",
    "2028": "68851",
    "2029": "69190",
    "2030": "69171",
    "2031": "68443",
    "2032": "67739",
    "2033": "69232",
    "2034": "70461",
    "2035": "73169",
    "2036": "75690",
    "2037": "77788",
    "2038": "78039",
    "2039": "77041",
    "2040": "77377",
    "2041": "78986",
    "2042": "79953",
    "2043": "82000",
    "2044": "85754",
    "2045": "87841",
    "2046": "88843",
    "2047": "91957",
    "2048": "94351",
    "2049": "98018",
    "2050": "102622",
    "Age": "65-69"
  },
  {
    "2021": "43132",
    "2022": "44687",
    "2023": "46232",
    "2024": "47621",
    "2025": "48362",
    "2026": "49598",
    "2027": "52371",
    "2028": "53913",
    "2029": "55674",
    "2030": "57437",
    "2031": "59885",
    "2032": "60411",
    "2033": "61555",
    "2034": "61969",
    "2035": "62058",
    "2036": "61531",
    "2037": "61025",
    "2038": "62517",
    "2039": "63750",
    "2040": "66330",
    "2041": "68726",
    "2042": "70725",
    "2043": "71064",
    "2044": "70235",
    "2045": "70686",
    "2046": "72315",
    "2047": "73320",
    "2048": "75309",
    "2049": "78833",
    "2050": "80856",
    "Age": "70-74"
  },
  {
    "2021": "24596",
    "2022": "25846",
    "2023": "27934",
    "2024": "30863",
    "2025": "33868",
    "2026": "35314",
    "2027": "36689",
    "2028": "38018",
    "2029": "39279",
    "2030": "40018",
    "2031": "41145",
    "2032": "43642",
    "2033": "45029",
    "2034": "46650",
    "2035": "48253",
    "2036": "50452",
    "2037": "51084",
    "2038": "52172",
    "2039": "52664",
    "2040": "52869",
    "2041": "52577",
    "2042": "52304",
    "2043": "53770",
    "2044": "54992",
    "2045": "57384",
    "2046": "59596",
    "2047": "61440",
    "2048": "61860",
    "2049": "61220",
    "2050": "61787",
    "Age": "75-79"
  },
  {
    "2021": "16022",
    "2022": "17465",
    "2023": "17583",
    "2024": "17411",
    "2025": "17494",
    "2026": "17858",
    "2027": "18962",
    "2028": "20561",
    "2029": "22786",
    "2030": "25081",
    "2031": "26239",
    "2032": "27403",
    "2033": "28494",
    "2034": "29597",
    "2035": "30319",
    "2036": "31310",
    "2037": "33442",
    "2038": "34631",
    "2039": "36052",
    "2040": "37438",
    "2041": "39305",
    "2042": "40011",
    "2043": "40998",
    "2044": "41545",
    "2045": "41851",
    "2046": "41796",
    "2047": "41758",
    "2048": "43133",
    "2049": "44290",
    "2050": "46398",
    "Age": "80-84"
  },
  {
    "2021": "6804",
    "2022": "7866",
    "2023": "8835",
    "2024": "9936",
    "2025": "11031",
    "2026": "12758",
    "2027": "14221",
    "2028": "14748",
    "2029": "15198",
    "2030": "15841",
    "2031": "17125",
    "2032": "18744",
    "2033": "20069",
    "2034": "21788",
    "2035": "23699",
    "2036": "25264",
    "2037": "27081",
    "2038": "28643",
    "2039": "30502",
    "2040": "32233",
    "2041": "33915",
    "2042": "36620",
    "2043": "38443",
    "2044": "40666",
    "2045": "42770",
    "2046": "45203",
    "2047": "47537",
    "2048": "49425",
    "2049": "51294",
    "2050": "52902",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='ayol').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='ayol',
                    population=population
                )

print("Navoi female data import completed successfully!")
