import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Toshkent Shahri', defaults={'svg_id': 'tashkent_city'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "2862419",
    "2022": "2922073",
    "2023": "2982428",
    "2024": "3042939",
    "2025": "3103542",
    "2026": "3163973",
    "2027": "3223992",
    "2028": "3283651",
    "2029": "3342614",
    "2030": "3400543",
    "2031": "3457093",
    "2032": "3512045",
    "2033": "3565243",
    "2034": "3616412",
    "2035": "3665784",
    "2036": "3713361",
    "2037": "3759487",
    "2038": "3804317",
    "2039": "3848132",
    "2040": "3891343",
    "2041": "3934470",
    "2042": "3977882",
    "2043": "4021790",
    "2044": "4066330",
    "2045": "4111743",
    "2046": "4158048",
    "2047": "4205218",
    "2048": "4253258",
    "2049": "4302009",
    "2050": "4351317",
    "Age": "Total"
  },
  {
    "2021": "272215",
    "2022": "288996",
    "2023": "304861",
    "2024": "316905",
    "2025": "325684",
    "2026": "328507",
    "2027": "330949",
    "2028": "332456",
    "2029": "333233",
    "2030": "332980",
    "2031": "331561",
    "2032": "328960",
    "2033": "324931",
    "2034": "319527",
    "2035": "313304",
    "2036": "306646",
    "2037": "300109",
    "2038": "294001",
    "2039": "288904",
    "2040": "284981",
    "2041": "282734",
    "2042": "282216",
    "2043": "283471",
    "2044": "286369",
    "2045": "290734",
    "2046": "296070",
    "2047": "301986",
    "2048": "308280",
    "2049": "314684",
    "2050": "320809",
    "Age": "0-4"
  },
  {
    "2021": "234010",
    "2022": "238296",
    "2023": "243722",
    "2024": "250968",
    "2025": "260896",
    "2026": "276013",
    "2027": "292608",
    "2028": "308305",
    "2029": "320235",
    "2030": "328972",
    "2031": "331819",
    "2032": "334315",
    "2033": "335885",
    "2034": "336736",
    "2035": "336572",
    "2036": "335260",
    "2037": "332783",
    "2038": "328901",
    "2039": "323662",
    "2040": "317618",
    "2041": "311145",
    "2042": "304787",
    "2043": "298850",
    "2044": "293906",
    "2045": "290114",
    "2046": "287969",
    "2047": "287524",
    "2048": "288822",
    "2049": "291739",
    "2050": "296099",
    "Age": "5-9"
  },
  {
    "2021": "232735",
    "2022": "232623",
    "2023": "229670",
    "2024": "227371",
    "2025": "230872",
    "2026": "237132",
    "2027": "241436",
    "2028": "246863",
    "2029": "254069",
    "2030": "263898",
    "2031": "278857",
    "2032": "295272",
    "2033": "310811",
    "2034": "322633",
    "2035": "331320",
    "2036": "334175",
    "2037": "336701",
    "2038": "338311",
    "2039": "339216",
    "2040": "339121",
    "2041": "337895",
    "2042": "335522",
    "2043": "331763",
    "2044": "326662",
    "2045": "320763",
    "2046": "314436",
    "2047": "308220",
    "2048": "302413",
    "2049": "297583",
    "2050": "293884",
    "Age": "10-14"
  },
  {
    "2021": "194054",
    "2022": "202334",
    "2023": "214718",
    "2024": "225538",
    "2025": "232511",
    "2026": "234789",
    "2027": "234732",
    "2028": "231880",
    "2029": "229687",
    "2030": "233227",
    "2031": "239471",
    "2032": "243754",
    "2033": "249147",
    "2034": "256297",
    "2035": "266036",
    "2036": "280859",
    "2037": "297106",
    "2038": "312482",
    "2039": "324181",
    "2040": "332803",
    "2041": "335661",
    "2042": "338223",
    "2043": "339880",
    "2044": "340844",
    "2045": "340820",
    "2046": "339677",
    "2047": "337399",
    "2048": "333748",
    "2049": "328765",
    "2050": "322991",
    "Age": "15-19"
  },
  {
    "2021": "189672",
    "2022": "189387",
    "2023": "190061",
    "2024": "194752",
    "2025": "198378",
    "2026": "205270",
    "2027": "213492",
    "2028": "225693",
    "2029": "236292",
    "2030": "243081",
    "2031": "245301",
    "2032": "245364",
    "2033": "242793",
    "2034": "240880",
    "2035": "244497",
    "2036": "250660",
    "2037": "254839",
    "2038": "260137",
    "2039": "267184",
    "2040": "276761",
    "2041": "291293",
    "2042": "307135",
    "2043": "322103",
    "2044": "333496",
    "2045": "341973",
    "2046": "344859",
    "2047": "347515",
    "2048": "349282",
    "2049": "350372",
    "2050": "350490",
    "Age": "20-24"
  },
  {
    "2021": "213523",
    "2022": "213518",
    "2023": "213182",
    "2024": "211744",
    "2025": "209364",
    "2026": "207446",
    "2027": "207637",
    "2028": "208625",
    "2029": "213457",
    "2030": "217115",
    "2031": "223901",
    "2032": "231848",
    "2033": "243636",
    "2034": "253865",
    "2035": "260495",
    "2036": "262783",
    "2037": "263057",
    "2038": "260765",
    "2039": "259052",
    "2040": "262683",
    "2041": "268773",
    "2042": "272912",
    "2043": "278161",
    "2044": "285075",
    "2045": "294378",
    "2046": "308471",
    "2047": "323818",
    "2048": "338364",
    "2049": "349474",
    "2050": "357832",
    "Age": "25-29"
  },
  {
    "2021": "231191",
    "2022": "226118",
    "2023": "223485",
    "2024": "223936",
    "2025": "224956",
    "2026": "224674",
    "2027": "225014",
    "2028": "225010",
    "2029": "223908",
    "2030": "221862",
    "2031": "220220",
    "2032": "220599",
    "2033": "221670",
    "2034": "226478",
    "2035": "230062",
    "2036": "236690",
    "2037": "244377",
    "2038": "255826",
    "2039": "265778",
    "2040": "272301",
    "2041": "274650",
    "2042": "275099",
    "2043": "273043",
    "2044": "271526",
    "2045": "275209",
    "2046": "281275",
    "2047": "285401",
    "2048": "290608",
    "2049": "297408",
    "2050": "306486",
    "Age": "30-34"
  },
  {
    "2021": "238712",
    "2022": "244999",
    "2023": "248994",
    "2024": "245040",
    "2025": "240486",
    "2026": "236679",
    "2027": "232030",
    "2028": "229730",
    "2029": "230390",
    "2030": "231573",
    "2031": "231462",
    "2032": "231961",
    "2033": "232119",
    "2034": "231208",
    "2035": "229367",
    "2036": "227901",
    "2037": "228393",
    "2038": "229508",
    "2039": "234284",
    "2040": "237808",
    "2041": "244321",
    "2042": "251825",
    "2043": "263027",
    "2044": "272779",
    "2045": "279235",
    "2046": "281651",
    "2047": "282251",
    "2048": "280392",
    "2049": "279026",
    "2050": "282727",
    "Age": "35-39"
  },
  {
    "2021": "200998",
    "2022": "208048",
    "2023": "213672",
    "2024": "223016",
    "2025": "231633",
    "2026": "239622",
    "2027": "245834",
    "2028": "249891",
    "2029": "246216",
    "2030": "241979",
    "2031": "238470",
    "2032": "234098",
    "2033": "231996",
    "2034": "232759",
    "2035": "234022",
    "2036": "234009",
    "2037": "234605",
    "2038": "234872",
    "2039": "234102",
    "2040": "232423",
    "2041": "231102",
    "2042": "231696",
    "2043": "232865",
    "2044": "237632",
    "2045": "241132",
    "2046": "247567",
    "2047": "254938",
    "2048": "265945",
    "2049": "275537",
    "2050": "281931",
    "Age": "40-44"
  },
  {
    "2021": "181169",
    "2022": "182410",
    "2023": "184103",
    "2024": "191407",
    "2025": "196438",
    "2026": "200399",
    "2027": "207336",
    "2028": "212838",
    "2029": "221994",
    "2030": "230444",
    "2031": "238295",
    "2032": "244434",
    "2033": "248506",
    "2034": "245048",
    "2035": "241059",
    "2036": "237790",
    "2037": "233646",
    "2038": "231703",
    "2039": "232543",
    "2040": "233874",
    "2041": "233955",
    "2042": "234641",
    "2043": "235007",
    "2044": "234364",
    "2045": "232835",
    "2046": "231645",
    "2047": "232330",
    "2048": "233551",
    "2049": "238305",
    "2050": "241778",
    "Age": "45-49"
  },
  {
    "2021": "165933",
    "2022": "172613",
    "2023": "175946",
    "2024": "175097",
    "2025": "176438",
    "2026": "178731",
    "2027": "180026",
    "2028": "181763",
    "2029": "188934",
    "2030": "193880",
    "2031": "197775",
    "2032": "204589",
    "2033": "209968",
    "2034": "218931",
    "2035": "227221",
    "2036": "234930",
    "2037": "240992",
    "2038": "245054",
    "2039": "241812",
    "2040": "238066",
    "2041": "235042",
    "2042": "231140",
    "2043": "229364",
    "2044": "230285",
    "2045": "231690",
    "2046": "231871",
    "2047": "232644",
    "2048": "233098",
    "2049": "232568",
    "2050": "231174",
    "Age": "50-54"
  },
  {
    "2021": "144075",
    "2022": "143017",
    "2023": "146229",
    "2024": "148978",
    "2025": "155008",
    "2026": "161591",
    "2027": "168012",
    "2028": "171253",
    "2029": "170478",
    "2030": "171877",
    "2031": "174225",
    "2032": "175600",
    "2033": "177408",
    "2034": "184403",
    "2035": "189258",
    "2036": "193089",
    "2037": "199755",
    "2038": "204991",
    "2039": "213727",
    "2040": "221838",
    "2041": "229382",
    "2042": "235354",
    "2043": "239383",
    "2044": "236404",
    "2045": "232951",
    "2046": "230224",
    "2047": "226615",
    "2048": "225032",
    "2049": "226033",
    "2050": "227510",
    "Age": "55-59"
  },
  {
    "2021": "128770",
    "2022": "131287",
    "2023": "133759",
    "2024": "135934",
    "2025": "137307",
    "2026": "136397",
    "2027": "135520",
    "2028": "138684",
    "2029": "141402",
    "2030": "147185",
    "2031": "153443",
    "2032": "159524",
    "2033": "162649",
    "2034": "161984",
    "2035": "163466",
    "2036": "165890",
    "2037": "167373",
    "2038": "169282",
    "2039": "176033",
    "2040": "180773",
    "2041": "184529",
    "2042": "190998",
    "2043": "196059",
    "2044": "204501",
    "2045": "212386",
    "2046": "219710",
    "2047": "225555",
    "2048": "229512",
    "2049": "226861",
    "2050": "223769",
    "Age": "60-64"
  },
  {
    "2021": "96275",
    "2022": "100734",
    "2023": "104795",
    "2024": "108258",
    "2025": "111498",
    "2026": "116553",
    "2027": "118917",
    "2028": "121268",
    "2029": "123356",
    "2030": "124698",
    "2031": "124058",
    "2032": "123448",
    "2033": "126559",
    "2034": "129248",
    "2035": "134721",
    "2036": "140582",
    "2037": "146250",
    "2038": "149249",
    "2039": "148753",
    "2040": "150341",
    "2041": "152852",
    "2042": "154465",
    "2043": "156495",
    "2044": "162927",
    "2045": "167518",
    "2046": "171179",
    "2047": "177382",
    "2048": "182226",
    "2049": "190264",
    "2050": "197825",
    "Age": "65-69"
  },
  {
    "2021": "70732",
    "2022": "73803",
    "2023": "76225",
    "2024": "78686",
    "2025": "80254",
    "2026": "82604",
    "2027": "86659",
    "2028": "90241",
    "2029": "93411",
    "2030": "96362",
    "2031": "100926",
    "2032": "103168",
    "2033": "105413",
    "2034": "107429",
    "2035": "108763",
    "2036": "108448",
    "2037": "108156",
    "2038": "111176",
    "2039": "113815",
    "2040": "118900",
    "2041": "124286",
    "2042": "129457",
    "2043": "132300",
    "2044": "132003",
    "2045": "133687",
    "2046": "136259",
    "2047": "137990",
    "2048": "140125",
    "2049": "146114",
    "2050": "150478",
    "Age": "70-74"
  },
  {
    "2021": "36417",
    "2022": "39105",
    "2023": "43026",
    "2024": "48227",
    "2025": "53090",
    "2026": "55607",
    "2027": "58154",
    "2028": "60175",
    "2029": "62352",
    "2030": "63810",
    "2031": "65882",
    "2032": "69469",
    "2033": "72514",
    "2034": "75346",
    "2035": "77958",
    "2036": "81929",
    "2037": "84025",
    "2038": "86107",
    "2039": "88002",
    "2040": "89281",
    "2041": "89307",
    "2042": "89350",
    "2043": "92205",
    "2044": "94740",
    "2045": "99303",
    "2046": "104063",
    "2047": "108579",
    "2048": "111177",
    "2049": "111061",
    "2050": "112786",
    "Age": "75-79"
  },
  {
    "2021": "22803",
    "2022": "24277",
    "2023": "24213",
    "2024": "23940",
    "2025": "24121",
    "2026": "25214",
    "2027": "27282",
    "2028": "30061",
    "2029": "33753",
    "2030": "37257",
    "2031": "39171",
    "2032": "41164",
    "2033": "42772",
    "2034": "44603",
    "2035": "45913",
    "2036": "47650",
    "2037": "50639",
    "2038": "53064",
    "2039": "55441",
    "2040": "57617",
    "2041": "60846",
    "2042": "62700",
    "2043": "64519",
    "2044": "66201",
    "2045": "67371",
    "2046": "67691",
    "2047": "68025",
    "2048": "70572",
    "2049": "72865",
    "2050": "76705",
    "Age": "80-84"
  },
  {
    "2021": "9135",
    "2022": "10508",
    "2023": "11767",
    "2024": "13143",
    "2025": "14607",
    "2026": "16746",
    "2027": "18355",
    "2028": "18915",
    "2029": "19448",
    "2030": "20343",
    "2031": "22254",
    "2032": "24478",
    "2033": "26466",
    "2034": "29038",
    "2035": "31751",
    "2036": "34072",
    "2037": "36681",
    "2038": "38889",
    "2039": "41642",
    "2040": "44154",
    "2041": "46697",
    "2042": "50361",
    "2043": "53294",
    "2044": "56614",
    "2045": "59644",
    "2046": "63431",
    "2047": "67045",
    "2048": "70111",
    "2049": "73352",
    "2050": "76041",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='jami').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='jami',
                    population=population
                )

print("Navoi female data import completed successfully!")
