import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Farg\'ona', defaults={'svg_id': 'fergana'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "1931767",
    "2022": "1969343",
    "2023": "2006591",
    "2024": "2043229",
    "2025": "2079291",
    "2026": "2114780",
    "2027": "2149611",
    "2028": "2183756",
    "2029": "2216965",
    "2030": "2249108",
    "2031": "2280016",
    "2032": "2309685",
    "2033": "2338166",
    "2034": "2365340",
    "2035": "2391396",
    "2036": "2416340",
    "2037": "2440404",
    "2038": "2463708",
    "2039": "2486456",
    "2040": "2508904",
    "2041": "2531368",
    "2042": "2554059",
    "2043": "2577051",
    "2044": "2600387",
    "2045": "2624157",
    "2046": "2648332",
    "2047": "2672849",
    "2048": "2697650",
    "2049": "2722608",
    "2050": "2747596",
    "Age": "Total"
  },
  {
    "2021": "207044",
    "2022": "218746",
    "2023": "227527",
    "2024": "232484",
    "2025": "234111",
    "2026": "233645",
    "2027": "232465",
    "2028": "230887",
    "2029": "228986",
    "2030": "226591",
    "2031": "223543",
    "2032": "219917",
    "2033": "215792",
    "2034": "211306",
    "2035": "206790",
    "2036": "202411",
    "2037": "198417",
    "2038": "194893",
    "2039": "192144",
    "2040": "190228",
    "2041": "189458",
    "2042": "189798",
    "2043": "191187",
    "2044": "193466",
    "2045": "196481",
    "2046": "199876",
    "2047": "203381",
    "2048": "206869",
    "2049": "210183",
    "2050": "213085",
    "Age": "0-4"
  },
  {
    "2021": "178186",
    "2022": "180996",
    "2023": "184325",
    "2024": "189714",
    "2025": "196597",
    "2026": "205845",
    "2027": "217386",
    "2028": "226053",
    "2029": "230964",
    "2030": "232606",
    "2031": "232191",
    "2032": "231077",
    "2033": "229571",
    "2034": "227748",
    "2035": "225436",
    "2036": "222480",
    "2037": "218954",
    "2038": "214937",
    "2039": "210561",
    "2040": "206159",
    "2041": "201892",
    "2042": "198006",
    "2043": "194581",
    "2044": "191919",
    "2045": "190075",
    "2046": "189358",
    "2047": "189732",
    "2048": "191136",
    "2049": "193416",
    "2050": "196420",
    "Age": "5-9"
  },
  {
    "2021": "165533",
    "2022": "164186",
    "2023": "166246",
    "2024": "169039",
    "2025": "172665",
    "2026": "177480",
    "2027": "180256",
    "2028": "183553",
    "2029": "188889",
    "2030": "195696",
    "2031": "204846",
    "2032": "216281",
    "2033": "224875",
    "2034": "229760",
    "2035": "231416",
    "2036": "231040",
    "2037": "229977",
    "2038": "228528",
    "2039": "226767",
    "2040": "224526",
    "2041": "221650",
    "2042": "218212",
    "2043": "214289",
    "2044": "210010",
    "2045": "205701",
    "2046": "201520",
    "2047": "197712",
    "2048": "194354",
    "2049": "191747",
    "2050": "189944",
    "Age": "10-14"
  },
  {
    "2021": "134348",
    "2022": "141729",
    "2023": "149016",
    "2024": "153778",
    "2025": "160914",
    "2026": "164717",
    "2027": "163362",
    "2028": "165424",
    "2029": "168207",
    "2030": "171825",
    "2031": "176618",
    "2032": "179366",
    "2033": "182631",
    "2034": "187927",
    "2035": "194687",
    "2036": "203769",
    "2037": "215100",
    "2038": "223599",
    "2039": "228438",
    "2040": "230098",
    "2041": "229766",
    "2042": "228765",
    "2043": "227387",
    "2044": "225699",
    "2045": "223533",
    "2046": "220735",
    "2047": "217375",
    "2048": "213531",
    "2049": "209331",
    "2050": "205098",
    "Age": "15-19"
  },
  {
    "2021": "135457",
    "2022": "131143",
    "2023": "127690",
    "2024": "130107",
    "2025": "131581",
    "2026": "135494",
    "2027": "142616",
    "2028": "149603",
    "2029": "154074",
    "2030": "160856",
    "2031": "164441",
    "2032": "163140",
    "2033": "165291",
    "2034": "168110",
    "2035": "171693",
    "2036": "176324",
    "2037": "178898",
    "2038": "182070",
    "2039": "187315",
    "2040": "193980",
    "2041": "202786",
    "2042": "213674",
    "2043": "221794",
    "2044": "226471",
    "2045": "228175",
    "2046": "228015",
    "2047": "227233",
    "2048": "226076",
    "2049": "224604",
    "2050": "222654",
    "Age": "20-24"
  },
  {
    "2021": "175528",
    "2022": "169683",
    "2023": "162840",
    "2024": "154863",
    "2025": "145224",
    "2026": "137888",
    "2027": "134135",
    "2028": "131000",
    "2029": "133475",
    "2030": "134899",
    "2031": "138606",
    "2032": "145301",
    "2033": "151862",
    "2034": "155995",
    "2035": "162492",
    "2036": "166016",
    "2037": "164841",
    "2038": "167027",
    "2039": "169762",
    "2040": "173206",
    "2041": "177738",
    "2042": "180325",
    "2043": "183489",
    "2044": "188573",
    "2045": "194922",
    "2046": "203284",
    "2047": "213704",
    "2048": "221508",
    "2049": "226082",
    "2050": "227851",
    "Age": "25-29"
  },
  {
    "2021": "166329",
    "2022": "169750",
    "2023": "171580",
    "2024": "174506",
    "2025": "177063",
    "2026": "173844",
    "2027": "168432",
    "2028": "162138",
    "2029": "154798",
    "2030": "145824",
    "2031": "139028",
    "2032": "135639",
    "2033": "132703",
    "2034": "135206",
    "2035": "136592",
    "2036": "140153",
    "2037": "146582",
    "2038": "152896",
    "2039": "156849",
    "2040": "163193",
    "2041": "166706",
    "2042": "165645",
    "2043": "167895",
    "2044": "170627",
    "2045": "174035",
    "2046": "178533",
    "2047": "181113",
    "2048": "184227",
    "2049": "189162",
    "2050": "195274",
    "Age": "30-34"
  },
  {
    "2021": "144128",
    "2022": "150755",
    "2023": "156726",
    "2024": "158996",
    "2025": "160461",
    "2026": "163884",
    "2027": "167177",
    "2028": "168946",
    "2029": "171836",
    "2030": "174445",
    "2031": "171470",
    "2032": "166429",
    "2033": "160559",
    "2034": "153685",
    "2035": "145188",
    "2036": "138774",
    "2037": "135641",
    "2038": "132850",
    "2039": "135377",
    "2040": "136748",
    "2041": "140232",
    "2042": "146505",
    "2043": "152676",
    "2044": "156533",
    "2045": "162787",
    "2046": "166299",
    "2047": "165317",
    "2048": "167592",
    "2049": "170289",
    "2050": "173627",
    "Age": "35-39"
  },
  {
    "2021": "122759",
    "2022": "125186",
    "2023": "128432",
    "2024": "131099",
    "2025": "136694",
    "2026": "141991",
    "2027": "148403",
    "2028": "154221",
    "2029": "156451",
    "2030": "157908",
    "2031": "161283",
    "2032": "164530",
    "2033": "166291",
    "2034": "169172",
    "2035": "171817",
    "2036": "169010",
    "2037": "164221",
    "2038": "158637",
    "2039": "152079",
    "2040": "143914",
    "2041": "137768",
    "2042": "134819",
    "2043": "132145",
    "2044": "134701",
    "2045": "136080",
    "2046": "139517",
    "2047": "145678",
    "2048": "151737",
    "2049": "155511",
    "2050": "161677",
    "Age": "40-44"
  },
  {
    "2021": "115441",
    "2022": "115461",
    "2023": "115681",
    "2024": "117978",
    "2025": "119876",
    "2026": "120909",
    "2027": "123283",
    "2028": "126466",
    "2029": "129070",
    "2030": "134555",
    "2031": "139733",
    "2032": "146014",
    "2033": "151736",
    "2034": "153943",
    "2035": "155403",
    "2036": "158749",
    "2037": "161968",
    "2038": "163730",
    "2039": "166602",
    "2040": "169272",
    "2041": "166598",
    "2042": "162007",
    "2043": "156646",
    "2044": "150331",
    "2045": "142423",
    "2046": "136479",
    "2047": "133665",
    "2048": "131077",
    "2049": "133639",
    "2050": "135008",
    "Age": "45-49"
  },
  {
    "2021": "101244",
    "2022": "104498",
    "2023": "107037",
    "2024": "110424",
    "2025": "111558",
    "2026": "113143",
    "2027": "113176",
    "2028": "113414",
    "2029": "115691",
    "2030": "117573",
    "2031": "118616",
    "2032": "120965",
    "2033": "124107",
    "2034": "126672",
    "2035": "132061",
    "2036": "137139",
    "2037": "143300",
    "2038": "148929",
    "2039": "151117",
    "2040": "152587",
    "2041": "155916",
    "2042": "159126",
    "2043": "160908",
    "2044": "163777",
    "2045": "166465",
    "2046": "163909",
    "2047": "159487",
    "2048": "154311",
    "2049": "148193",
    "2050": "140504",
    "Age": "50-54"
  },
  {
    "2021": "92427",
    "2022": "92795",
    "2023": "93705",
    "2024": "93954",
    "2025": "95466",
    "2026": "98284",
    "2027": "101444",
    "2028": "103919",
    "2029": "107216",
    "2030": "108337",
    "2031": "109932",
    "2032": "110011",
    "2033": "110295",
    "2034": "112562",
    "2035": "114431",
    "2036": "115498",
    "2037": "117819",
    "2038": "120914",
    "2039": "123449",
    "2040": "128736",
    "2041": "133710",
    "2042": "139739",
    "2043": "145264",
    "2044": "147433",
    "2045": "148920",
    "2046": "152234",
    "2047": "155430",
    "2048": "157224",
    "2049": "160057",
    "2050": "162730",
    "Age": "55-59"
  },
  {
    "2021": "79125",
    "2022": "82851",
    "2023": "84878",
    "2024": "86243",
    "2025": "87210",
    "2026": "87627",
    "2027": "88010",
    "2028": "88940",
    "2029": "89218",
    "2030": "90725",
    "2031": "93479",
    "2032": "96542",
    "2033": "98960",
    "2034": "102146",
    "2035": "103264",
    "2036": "104882",
    "2037": "105030",
    "2038": "105382",
    "2039": "107640",
    "2040": "109497",
    "2041": "110609",
    "2042": "112899",
    "2043": "115943",
    "2044": "118455",
    "2045": "123612",
    "2046": "128455",
    "2047": "134301",
    "2048": "139674",
    "2049": "141795",
    "2050": "143285",
    "Age": "60-64"
  },
  {
    "2021": "49395",
    "2022": "52333",
    "2023": "57816",
    "2024": "62852",
    "2025": "68062",
    "2026": "72225",
    "2027": "75641",
    "2028": "77560",
    "2029": "78872",
    "2030": "79856",
    "2031": "80351",
    "2032": "80802",
    "2033": "81789",
    "2034": "82137",
    "2035": "83655",
    "2036": "86337",
    "2037": "89280",
    "2038": "91634",
    "2039": "94677",
    "2040": "95807",
    "2041": "97457",
    "2042": "97709",
    "2043": "98164",
    "2044": "100414",
    "2045": "102258",
    "2046": "103431",
    "2047": "105674",
    "2048": "108634",
    "2049": "111100",
    "2050": "116056",
    "Age": "65-69"
  },
  {
    "2021": "31260",
    "2022": "34131",
    "2023": "36475",
    "2024": "38556",
    "2025": "39682",
    "2026": "42866",
    "2027": "45489",
    "2028": "50358",
    "2029": "54809",
    "2030": "59434",
    "2031": "63178",
    "2032": "66253",
    "2033": "68073",
    "2034": "69347",
    "2035": "70367",
    "2036": "70971",
    "2037": "71514",
    "2038": "72569",
    "2039": "73006",
    "2040": "74530",
    "2041": "77107",
    "2042": "79894",
    "2043": "82168",
    "2044": "85028",
    "2045": "86170",
    "2046": "87843",
    "2047": "88209",
    "2048": "88771",
    "2049": "90973",
    "2050": "92768",
    "Age": "70-74"
  },
  {
    "2021": "15939",
    "2022": "16542",
    "2023": "18131",
    "2024": "20071",
    "2025": "23095",
    "2026": "24952",
    "2027": "27310",
    "2028": "29207",
    "2029": "30922",
    "2030": "31953",
    "2031": "34671",
    "2032": "36937",
    "2033": "41063",
    "2034": "44815",
    "2035": "48730",
    "2036": "51966",
    "2037": "54621",
    "2038": "56308",
    "2039": "57517",
    "2040": "58556",
    "2041": "59263",
    "2042": "59890",
    "2043": "60996",
    "2044": "61520",
    "2045": "63021",
    "2046": "65434",
    "2047": "67985",
    "2048": "70116",
    "2049": "72687",
    "2050": "73798",
    "Age": "75-79"
  },
  {
    "2021": "11513",
    "2022": "12000",
    "2023": "11343",
    "2024": "10791",
    "2025": "10837",
    "2026": "11085",
    "2027": "11623",
    "2028": "12776",
    "2029": "14187",
    "2030": "16444",
    "2031": "17843",
    "2032": "19629",
    "2033": "21046",
    "2034": "22363",
    "2035": "23271",
    "2036": "25434",
    "2037": "27271",
    "2038": "30514",
    "2039": "33445",
    "2040": "36519",
    "2041": "39125",
    "2042": "41261",
    "2043": "42742",
    "2044": "43831",
    "2045": "44834",
    "2046": "45599",
    "2047": "46267",
    "2048": "47356",
    "2049": "47922",
    "2050": "49315",
    "Age": "80-84"
  },
  {
    "2021": "6111",
    "2022": "6560",
    "2023": "7143",
    "2024": "7770",
    "2025": "8195",
    "2026": "8901",
    "2027": "9403",
    "2028": "9289",
    "2029": "9299",
    "2030": "9581",
    "2031": "10185",
    "2032": "10853",
    "2033": "11522",
    "2034": "12445",
    "2035": "14103",
    "2036": "15389",
    "2037": "16970",
    "2038": "18291",
    "2039": "19711",
    "2040": "21347",
    "2041": "23585",
    "2042": "25784",
    "2043": "28778",
    "2044": "31601",
    "2045": "34665",
    "2046": "37812",
    "2047": "40584",
    "2048": "43457",
    "2049": "45916",
    "2050": "48500",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='ayol').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='ayol',
                    population=population
                )

print("Navoi female data import completed successfully!")
