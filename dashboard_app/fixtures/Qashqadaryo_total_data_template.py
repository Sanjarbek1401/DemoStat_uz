import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Qashqadaryo', defaults={'svg_id': 'kashkadarya'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "3408345",
    "2022": "3489331",
    "2023": "3570102",
    "2024": "3649636",
    "2025": "3727757",
    "2026": "3804038",
    "2027": "3878215",
    "2028": "3950464",
    "2029": "4020486",
    "2030": "4088226",
    "2031": "4153601",
    "2032": "4216669",
    "2033": "4277476",
    "2034": "4335785",
    "2035": "4392079",
    "2036": "4446422",
    "2037": "4499278",
    "2038": "4550872",
    "2039": "4601566",
    "2040": "4651869",
    "2041": "4702486",
    "2042": "4753915",
    "2043": "4806409",
    "2044": "4860124",
    "2045": "4915337",
    "2046": "4971951",
    "2047": "5029809",
    "2048": "5088757",
    "2049": "5148452",
    "2050": "5208517",
    "Age": "Total"
  },
  {
    "2021": "414671",
    "2022": "439857",
    "2023": "461212",
    "2024": "476192",
    "2025": "484642",
    "2026": "487896",
    "2027": "484293",
    "2028": "478826",
    "2029": "472251",
    "2030": "464730",
    "2031": "456622",
    "2032": "448266",
    "2033": "439537",
    "2034": "430516",
    "2035": "421751",
    "2036": "413413",
    "2037": "405933",
    "2038": "399495",
    "2039": "394695",
    "2040": "391566",
    "2041": "390711",
    "2042": "392161",
    "2043": "395951",
    "2044": "401874",
    "2045": "409668",
    "2046": "418579",
    "2047": "427943",
    "2048": "437351",
    "2049": "446325",
    "2050": "454239",
    "Age": "0-4"
  },
  {
    "2021": "362918",
    "2022": "366233",
    "2023": "372881",
    "2024": "382620",
    "2025": "394813",
    "2026": "411190",
    "2027": "435981",
    "2028": "457003",
    "2029": "471776",
    "2030": "480146",
    "2031": "483437",
    "2032": "479966",
    "2033": "474683",
    "2034": "468317",
    "2035": "461019",
    "2036": "453142",
    "2037": "445020",
    "2038": "436525",
    "2039": "427738",
    "2040": "419203",
    "2041": "411085",
    "2042": "403815",
    "2043": "397568",
    "2044": "392936",
    "2045": "389947",
    "2046": "389198",
    "2047": "390717",
    "2048": "394539",
    "2049": "400462",
    "2050": "408229",
    "Age": "5-9"
  },
  {
    "2021": "312258",
    "2022": "322188",
    "2023": "328230",
    "2024": "337663",
    "2025": "349540",
    "2026": "360597",
    "2027": "363832",
    "2028": "370400",
    "2029": "380023",
    "2030": "392065",
    "2031": "408235",
    "2032": "432772",
    "2033": "453579",
    "2034": "468232",
    "2035": "476574",
    "2036": "479917",
    "2037": "476568",
    "2038": "471438",
    "2039": "465240",
    "2040": "458121",
    "2041": "450430",
    "2042": "442499",
    "2043": "434200",
    "2044": "425609",
    "2045": "417266",
    "2046": "409328",
    "2047": "402221",
    "2048": "396118",
    "2049": "391605",
    "2050": "388708",
    "Age": "10-14"
  },
  {
    "2021": "262793",
    "2022": "268468",
    "2023": "278481",
    "2024": "288456",
    "2025": "299500",
    "2026": "310170",
    "2027": "319958",
    "2028": "325914",
    "2029": "335254",
    "2030": "347014",
    "2031": "357975",
    "2032": "361173",
    "2033": "367703",
    "2034": "377258",
    "2035": "389214",
    "2036": "405248",
    "2037": "429576",
    "2038": "450181",
    "2039": "464706",
    "2040": "473003",
    "2041": "476379",
    "2042": "473143",
    "2043": "468173",
    "2044": "462150",
    "2045": "455214",
    "2046": "447708",
    "2047": "439959",
    "2048": "431837",
    "2049": "423417",
    "2050": "415233",
    "Age": "15-19"
  },
  {
    "2021": "277038",
    "2022": "270347",
    "2023": "268797",
    "2024": "264348",
    "2025": "260668",
    "2026": "261245",
    "2027": "266849",
    "2028": "276673",
    "2029": "286354",
    "2030": "297019",
    "2031": "307331",
    "2032": "316914",
    "2033": "322787",
    "2034": "331980",
    "2035": "343485",
    "2036": "354212",
    "2037": "357314",
    "2038": "363784",
    "2039": "373262",
    "2040": "385107",
    "2041": "400851",
    "2042": "424647",
    "2043": "444705",
    "2044": "458871",
    "2045": "467034",
    "2046": "470499",
    "2047": "467563",
    "2048": "462989",
    "2049": "457374",
    "2050": "450849",
    "Age": "20-24"
  },
  {
    "2021": "318763",
    "2022": "312579",
    "2023": "302778",
    "2024": "298152",
    "2025": "287121",
    "2026": "275256",
    "2027": "269052",
    "2028": "267842",
    "2029": "263753",
    "2030": "260398",
    "2031": "261099",
    "2032": "266553",
    "2033": "276045",
    "2034": "285370",
    "2035": "295706",
    "2036": "305724",
    "2037": "315082",
    "2038": "320791",
    "2039": "329752",
    "2040": "340950",
    "2041": "351492",
    "2042": "354632",
    "2043": "361138",
    "2044": "370503",
    "2045": "382078",
    "2046": "397336",
    "2047": "420450",
    "2048": "439908",
    "2049": "453732",
    "2050": "461801",
    "Age": "25-29"
  },
  {
    "2021": "307699",
    "2022": "311157",
    "2023": "313748",
    "2024": "313648",
    "2025": "317593",
    "2026": "314052",
    "2027": "308260",
    "2028": "298939",
    "2029": "294775",
    "2030": "284327",
    "2031": "273077",
    "2032": "267304",
    "2033": "266379",
    "2034": "262589",
    "2035": "259502",
    "2036": "260307",
    "2037": "265663",
    "2038": "274933",
    "2039": "284020",
    "2040": "294126",
    "2041": "303934",
    "2042": "313148",
    "2043": "318787",
    "2044": "327635",
    "2045": "338664",
    "2046": "349110",
    "2047": "352285",
    "2048": "358777",
    "2049": "367998",
    "2050": "379315",
    "Age": "30-34"
  },
  {
    "2021": "261218",
    "2022": "274444",
    "2023": "285515",
    "2024": "292717",
    "2025": "296053",
    "2026": "301893",
    "2027": "305207",
    "2028": "307770",
    "2029": "307710",
    "2030": "311723",
    "2031": "308435",
    "2032": "303057",
    "2033": "294205",
    "2034": "290471",
    "2035": "280545",
    "2036": "269827",
    "2037": "264421",
    "2038": "263733",
    "2039": "260196",
    "2040": "257335",
    "2041": "258243",
    "2042": "263551",
    "2043": "272672",
    "2044": "281597",
    "2045": "291547",
    "2046": "301209",
    "2047": "310316",
    "2048": "315887",
    "2049": "324609",
    "2050": "335447",
    "Age": "35-39"
  },
  {
    "2021": "199891",
    "2022": "208443",
    "2023": "218170",
    "2024": "227338",
    "2025": "241904",
    "2026": "256330",
    "2027": "269117",
    "2028": "279871",
    "2029": "286902",
    "2030": "290164",
    "2031": "295930",
    "2032": "299227",
    "2033": "301852",
    "2034": "301890",
    "2035": "305985",
    "2036": "302914",
    "2037": "297870",
    "2038": "289397",
    "2039": "285985",
    "2040": "276462",
    "2041": "266162",
    "2042": "261047",
    "2043": "260552",
    "2044": "257230",
    "2045": "254563",
    "2046": "255562",
    "2047": "260833",
    "2048": "269829",
    "2049": "278612",
    "2050": "288414",
    "Age": "40-44"
  },
  {
    "2021": "167553",
    "2022": "171136",
    "2023": "175512",
    "2024": "182942",
    "2025": "189876",
    "2026": "196219",
    "2027": "204531",
    "2028": "213996",
    "2029": "222901",
    "2030": "237101",
    "2031": "251163",
    "2032": "263646",
    "2033": "274178",
    "2034": "281102",
    "2035": "284349",
    "2036": "290091",
    "2037": "293405",
    "2038": "296089",
    "2039": "296214",
    "2040": "300370",
    "2041": "297491",
    "2042": "292722",
    "2043": "284568",
    "2044": "281418",
    "2045": "272249",
    "2046": "262318",
    "2047": "257447",
    "2048": "257095",
    "2049": "253938",
    "2050": "251412",
    "Age": "45-49"
  },
  {
    "2021": "137692",
    "2022": "142985",
    "2023": "146738",
    "2024": "153549",
    "2025": "158144",
    "2026": "163580",
    "2027": "167070",
    "2028": "171331",
    "2029": "178581",
    "2030": "185338",
    "2031": "191541",
    "2032": "199659",
    "2033": "208900",
    "2034": "217594",
    "2035": "231464",
    "2036": "245196",
    "2037": "257395",
    "2038": "267707",
    "2039": "274521",
    "2040": "277762",
    "2041": "283491",
    "2042": "286836",
    "2043": "289585",
    "2044": "289809",
    "2045": "294025",
    "2046": "291343",
    "2047": "286834",
    "2048": "278980",
    "2049": "276047",
    "2050": "267211",
    "Age": "50-54"
  },
  {
    "2021": "130171",
    "2022": "129911",
    "2023": "130508",
    "2024": "129459",
    "2025": "129948",
    "2026": "132930",
    "2027": "138064",
    "2028": "141696",
    "2029": "148264",
    "2030": "152692",
    "2031": "157994",
    "2032": "161420",
    "2033": "165582",
    "2034": "172649",
    "2035": "179223",
    "2036": "185292",
    "2037": "193196",
    "2038": "202179",
    "2039": "210648",
    "2040": "224136",
    "2041": "237487",
    "2042": "249351",
    "2043": "259397",
    "2044": "266076",
    "2045": "269330",
    "2046": "275054",
    "2047": "278435",
    "2048": "281241",
    "2049": "281556",
    "2050": "285798",
    "Age": "55-59"
  },
  {
    "2021": "110568",
    "2022": "115718",
    "2023": "119124",
    "2024": "120742",
    "2025": "121993",
    "2026": "122257",
    "2027": "122084",
    "2028": "122769",
    "2029": "121865",
    "2030": "122460",
    "2031": "125396",
    "2032": "130348",
    "2033": "133861",
    "2034": "140124",
    "2035": "144362",
    "2036": "149507",
    "2037": "152868",
    "2038": "156913",
    "2039": "163744",
    "2040": "170076",
    "2041": "175977",
    "2042": "183604",
    "2043": "192252",
    "2044": "200444",
    "2045": "213437",
    "2046": "226289",
    "2047": "237702",
    "2048": "247370",
    "2049": "253839",
    "2050": "257077",
    "Age": "60-64"
  },
  {
    "2021": "68641",
    "2022": "73556",
    "2023": "80504",
    "2024": "87239",
    "2025": "93638",
    "2026": "99618",
    "2027": "104307",
    "2028": "107477",
    "2029": "109061",
    "2030": "110364",
    "2031": "110790",
    "2032": "110788",
    "2033": "111623",
    "2034": "110956",
    "2035": "111716",
    "2036": "114608",
    "2037": "119330",
    "2038": "122705",
    "2039": "128585",
    "2040": "132601",
    "2041": "137538",
    "2042": "140820",
    "2043": "144721",
    "2044": "151243",
    "2045": "157274",
    "2046": "162956",
    "2047": "170214",
    "2048": "178416",
    "2049": "186229",
    "2050": "198527",
    "Age": "65-69"
  },
  {
    "2021": "38091",
    "2022": "41948",
    "2023": "45383",
    "2024": "49932",
    "2025": "53655",
    "2026": "58750",
    "2027": "63050",
    "2028": "69117",
    "2029": "75032",
    "2030": "80688",
    "2031": "86008",
    "2032": "90199",
    "2033": "93130",
    "2034": "94704",
    "2035": "96083",
    "2036": "96711",
    "2037": "96920",
    "2038": "97915",
    "2039": "97520",
    "2040": "98447",
    "2041": "101262",
    "2042": "105686",
    "2043": "108899",
    "2044": "114303",
    "2045": "118050",
    "2046": "122710",
    "2047": "125874",
    "2048": "129575",
    "2049": "135679",
    "2050": "141291",
    "Age": "70-74"
  },
  {
    "2021": "18474",
    "2022": "19588",
    "2023": "21872",
    "2024": "23878",
    "2025": "27497",
    "2026": "29839",
    "2027": "32966",
    "2028": "35731",
    "2029": "39396",
    "2030": "42513",
    "2031": "46704",
    "2032": "50299",
    "2033": "55335",
    "2034": "60288",
    "2035": "65070",
    "2036": "69601",
    "2037": "73186",
    "2038": "75805",
    "2039": "77331",
    "2040": "78749",
    "2041": "79564",
    "2042": "79978",
    "2043": "81110",
    "2044": "81000",
    "2045": "82086",
    "2046": "84762",
    "2047": "88762",
    "2048": "91727",
    "2049": "96476",
    "2050": "99825",
    "Age": "75-79"
  },
  {
    "2021": "12367",
    "2022": "13034",
    "2023": "12605",
    "2024": "12317",
    "2025": "12141",
    "2026": "12534",
    "2027": "13445",
    "2028": "15074",
    "2029": "16493",
    "2030": "19118",
    "2031": "20832",
    "2032": "23157",
    "2033": "25209",
    "2034": "27920",
    "2035": "30351",
    "2036": "33537",
    "2037": "36331",
    "2038": "40195",
    "2039": "44036",
    "2040": "47783",
    "2041": "51368",
    "2042": "54224",
    "2043": "56425",
    "2044": "57822",
    "2045": "59198",
    "2046": "60127",
    "2047": "60693",
    "2048": "61874",
    "2049": "62014",
    "2050": "63163",
    "Age": "80-84"
  },
  {
    "2021": "7539",
    "2022": "7740",
    "2023": "8044",
    "2024": "8445",
    "2025": "9032",
    "2026": "9682",
    "2027": "10149",
    "2028": "10034",
    "2029": "10094",
    "2030": "10364",
    "2031": "11034",
    "2032": "11919",
    "2033": "12888",
    "2034": "13825",
    "2035": "15679",
    "2036": "17174",
    "2037": "19200",
    "2038": "21086",
    "2039": "23374",
    "2040": "26072",
    "2041": "29022",
    "2042": "32052",
    "2043": "35705",
    "2044": "39602",
    "2045": "43708",
    "2046": "47863",
    "2047": "51560",
    "2048": "55243",
    "2049": "58540",
    "2050": "61978",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='jami').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='jami',
                    population=population
                )

print("Navoi female data import completed successfully!")
