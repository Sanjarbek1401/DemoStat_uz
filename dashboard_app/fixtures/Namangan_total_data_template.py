import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Namangan', defaults={'svg_id': 'namangan'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "2931055",
    "2022": "2995319",
    "2023": "3058997",
    "2024": "3121411",
    "2025": "3182575",
    "2026": "3242464",
    "2027": "3301090",
    "2028": "3358430",
    "2029": "3413958",
    "2030": "3467470",
    "2031": "3518785",
    "2032": "3567990",
    "2033": "3615309",
    "2034": "3660602",
    "2035": "3704202",
    "2036": "3746174",
    "2037": "3786996",
    "2038": "3826918",
    "2039": "3866302",
    "2040": "3905615",
    "2041": "3945423",
    "2042": "3986083",
    "2043": "4027720",
    "2044": "4070382",
    "2045": "4114214",
    "2046": "4159074",
    "2047": "4204807",
    "2048": "4251242",
    "2049": "4298101",
    "2050": "4345068",
    "Age": "Total"
  },
  {
    "2021": "348431",
    "2022": "367204",
    "2023": "380829",
    "2024": "388248",
    "2025": "391279",
    "2026": "389610",
    "2027": "386518",
    "2028": "382688",
    "2029": "378281",
    "2030": "373104",
    "2031": "367007",
    "2032": "360078",
    "2033": "352556",
    "2034": "344825",
    "2035": "337439",
    "2036": "330646",
    "2037": "324833",
    "2038": "320054",
    "2039": "316806",
    "2040": "315202",
    "2041": "315727",
    "2042": "318261",
    "2043": "322656",
    "2044": "328607",
    "2045": "335791",
    "2046": "343525",
    "2047": "351282",
    "2048": "358789",
    "2049": "365720",
    "2050": "371629",
    "Age": "0-4"
  },
  {
    "2021": "287908",
    "2022": "297852",
    "2023": "306932",
    "2024": "316283",
    "2025": "329707",
    "2026": "346718",
    "2027": "365346",
    "2028": "378873",
    "2029": "386254",
    "2030": "389293",
    "2031": "387669",
    "2032": "384640",
    "2033": "380880",
    "2034": "376551",
    "2035": "371458",
    "2036": "365454",
    "2037": "358623",
    "2038": "351203",
    "2039": "343575",
    "2040": "336289",
    "2041": "329590",
    "2042": "323863",
    "2043": "319161",
    "2044": "315977",
    "2045": "314423",
    "2046": "314980",
    "2047": "317531",
    "2048": "321928",
    "2049": "327870",
    "2050": "335035",
    "Age": "5-9"
  },
  {
    "2021": "257619",
    "2022": "255958",
    "2023": "258013",
    "2024": "267651",
    "2025": "277482",
    "2026": "286953",
    "2027": "296834",
    "2028": "305856",
    "2029": "315146",
    "2030": "328491",
    "2031": "345404",
    "2032": "363936",
    "2033": "377401",
    "2034": "384760",
    "2035": "387813",
    "2036": "386230",
    "2037": "383254",
    "2038": "379554",
    "2039": "375289",
    "2040": "370266",
    "2041": "364337",
    "2042": "357587",
    "2043": "350250",
    "2044": "342705",
    "2045": "335469",
    "2046": "328870",
    "2047": "323206",
    "2048": "318558",
    "2049": "315417",
    "2050": "313893",
    "Age": "10-14"
  },
  {
    "2021": "209334",
    "2022": "217958",
    "2023": "230886",
    "2024": "239580",
    "2025": "247802",
    "2026": "256585",
    "2027": "254914",
    "2028": "256971",
    "2029": "266574",
    "2030": "276358",
    "2031": "285781",
    "2032": "295602",
    "2033": "304574",
    "2034": "313826",
    "2035": "327114",
    "2036": "343948",
    "2037": "362388",
    "2038": "375785",
    "2039": "383120",
    "2040": "386185",
    "2041": "384646",
    "2042": "381733",
    "2043": "378102",
    "2044": "373908",
    "2045": "368959",
    "2046": "363105",
    "2047": "356432",
    "2048": "349172",
    "2049": "341702",
    "2050": "334563",
    "Age": "15-19"
  },
  {
    "2021": "214235",
    "2022": "210082",
    "2023": "206935",
    "2024": "205621",
    "2025": "207185",
    "2026": "208924",
    "2027": "217465",
    "2028": "230229",
    "2029": "238751",
    "2030": "246791",
    "2031": "255434",
    "2032": "253977",
    "2033": "255917",
    "2034": "265477",
    "2035": "275150",
    "2036": "284426",
    "2037": "294088",
    "2038": "302964",
    "2039": "312158",
    "2040": "325332",
    "2041": "341970",
    "2042": "360168",
    "2043": "373385",
    "2044": "380650",
    "2045": "383745",
    "2046": "382322",
    "2047": "379564",
    "2048": "376094",
    "2049": "372058",
    "2050": "367265",
    "Age": "20-24"
  },
  {
    "2021": "276056",
    "2022": "266524",
    "2023": "253285",
    "2024": "242683",
    "2025": "227088",
    "2026": "214055",
    "2027": "210129",
    "2028": "207138",
    "2029": "205930",
    "2030": "207538",
    "2031": "209253",
    "2032": "217617",
    "2033": "230120",
    "2034": "238452",
    "2035": "246355",
    "2036": "254937",
    "2037": "253371",
    "2038": "255503",
    "2039": "264937",
    "2040": "274464",
    "2041": "283619",
    "2042": "293184",
    "2043": "301978",
    "2044": "311056",
    "2045": "324031",
    "2046": "340397",
    "2047": "358321",
    "2048": "371362",
    "2049": "378575",
    "2050": "381717",
    "Age": "25-29"
  },
  {
    "2021": "262150",
    "2022": "268064",
    "2023": "273073",
    "2024": "276348",
    "2025": "276999",
    "2026": "273571",
    "2027": "264309",
    "2028": "251422",
    "2029": "241175",
    "2030": "225988",
    "2031": "213302",
    "2032": "209567",
    "2033": "206702",
    "2034": "205577",
    "2035": "207219",
    "2036": "208918",
    "2037": "217156",
    "2038": "229480",
    "2039": "237692",
    "2040": "245508",
    "2041": "254048",
    "2042": "252553",
    "2043": "254716",
    "2044": "264080",
    "2045": "273518",
    "2046": "282591",
    "2047": "292067",
    "2048": "300773",
    "2049": "309740",
    "2050": "322541",
    "Age": "30-34"
  },
  {
    "2021": "222193",
    "2022": "230478",
    "2023": "239082",
    "2024": "245471",
    "2025": "253185",
    "2026": "259006",
    "2027": "264805",
    "2028": "269742",
    "2029": "272998",
    "2030": "273706",
    "2031": "270437",
    "2032": "261451",
    "2033": "248901",
    "2034": "238980",
    "2035": "224162",
    "2036": "211786",
    "2037": "208221",
    "2038": "205472",
    "2039": "204429",
    "2040": "206110",
    "2041": "207815",
    "2042": "215968",
    "2043": "228152",
    "2044": "236273",
    "2045": "244020",
    "2046": "252520",
    "2047": "251085",
    "2048": "253266",
    "2049": "262549",
    "2050": "271881",
    "Age": "35-39"
  },
  {
    "2021": "181742",
    "2022": "188259",
    "2023": "194705",
    "2024": "200583",
    "2025": "209658",
    "2026": "219205",
    "2027": "227327",
    "2028": "235790",
    "2029": "242073",
    "2030": "249684",
    "2031": "255436",
    "2032": "261178",
    "2033": "266086",
    "2034": "269348",
    "2035": "270121",
    "2036": "266999",
    "2037": "258259",
    "2038": "246007",
    "2039": "236365",
    "2040": "221869",
    "2041": "209767",
    "2042": "206349",
    "2043": "203707",
    "2044": "202740",
    "2045": "204460",
    "2046": "206173",
    "2047": "214249",
    "2048": "226305",
    "2049": "234339",
    "2050": "242013",
    "Age": "40-44"
  },
  {
    "2021": "168698",
    "2022": "169750",
    "2023": "169937",
    "2024": "173047",
    "2025": "175063",
    "2026": "178721",
    "2027": "185129",
    "2028": "191466",
    "2029": "197252",
    "2030": "206182",
    "2031": "215568",
    "2032": "223586",
    "2033": "231938",
    "2034": "238139",
    "2035": "245670",
    "2036": "251382",
    "2037": "257083",
    "2038": "261974",
    "2039": "265241",
    "2040": "266084",
    "2041": "263109",
    "2042": "254601",
    "2043": "242639",
    "2044": "233259",
    "2045": "219083",
    "2046": "207253",
    "2047": "203973",
    "2048": "201429",
    "2049": "200529",
    "2050": "202271",
    "Age": "45-49"
  },
  {
    "2021": "138956",
    "2022": "144178",
    "2023": "149712",
    "2024": "155835",
    "2025": "160637",
    "2026": "164662",
    "2027": "165712",
    "2028": "165937",
    "2029": "169023",
    "2030": "171038",
    "2031": "174674",
    "2032": "180981",
    "2033": "187216",
    "2034": "192919",
    "2035": "201699",
    "2036": "210957",
    "2037": "218833",
    "2038": "227064",
    "2039": "233181",
    "2040": "240626",
    "2041": "246306",
    "2042": "251967",
    "2043": "256842",
    "2044": "260111",
    "2045": "261032",
    "2046": "258214",
    "2047": "249955",
    "2048": "238306",
    "2049": "229202",
    "2050": "215380",
    "Age": "50-54"
  },
  {
    "2021": "124455",
    "2022": "125059",
    "2023": "127198",
    "2024": "127374",
    "2025": "129668",
    "2026": "133821",
    "2027": "138894",
    "2028": "144289",
    "2029": "150218",
    "2030": "154890",
    "2031": "158839",
    "2032": "159912",
    "2033": "160220",
    "2034": "163293",
    "2035": "165330",
    "2036": "168961",
    "2037": "175147",
    "2038": "181255",
    "2039": "186861",
    "2040": "195450",
    "2041": "204524",
    "2042": "212241",
    "2043": "220312",
    "2044": "226315",
    "2045": "233649",
    "2046": "239290",
    "2047": "244888",
    "2048": "249725",
    "2049": "252969",
    "2050": "253967",
    "Age": "55-59"
  },
  {
    "2021": "105056",
    "2022": "109742",
    "2023": "112338",
    "2024": "114955",
    "2025": "115860",
    "2026": "116551",
    "2027": "117199",
    "2028": "119323",
    "2029": "119567",
    "2030": "121849",
    "2031": "125891",
    "2032": "130777",
    "2033": "136002",
    "2034": "141673",
    "2035": "146181",
    "2036": "150040",
    "2037": "151161",
    "2038": "151597",
    "2039": "154653",
    "2040": "156728",
    "2041": "160356",
    "2042": "166364",
    "2043": "172293",
    "2044": "177763",
    "2045": "186077",
    "2046": "194885",
    "2047": "202365",
    "2048": "210188",
    "2049": "216006",
    "2050": "223151",
    "Age": "60-64"
  },
  {
    "2021": "61515",
    "2022": "66806",
    "2023": "74520",
    "2024": "81580",
    "2025": "88824",
    "2026": "94081",
    "2027": "98365",
    "2028": "100812",
    "2029": "103293",
    "2030": "104280",
    "2031": "105089",
    "2032": "105837",
    "2033": "107964",
    "2034": "108342",
    "2035": "110627",
    "2036": "114527",
    "2037": "119170",
    "2038": "124161",
    "2039": "129488",
    "2040": "133780",
    "2041": "137515",
    "2042": "138706",
    "2043": "139319",
    "2044": "142345",
    "2045": "144467",
    "2046": "148064",
    "2047": "153812",
    "2048": "159477",
    "2049": "164735",
    "2050": "172635",
    "Age": "65-69"
  },
  {
    "2021": "36993",
    "2022": "39916",
    "2023": "42374",
    "2024": "44840",
    "2025": "47274",
    "2026": "52072",
    "2027": "56693",
    "2028": "63373",
    "2029": "69471",
    "2030": "75785",
    "2031": "80444",
    "2032": "84267",
    "2033": "86562",
    "2034": "88894",
    "2035": "89989",
    "2036": "90942",
    "2037": "91816",
    "2038": "93928",
    "2039": "94461",
    "2040": "96718",
    "2041": "100408",
    "2042": "104724",
    "2043": "109400",
    "2044": "114284",
    "2045": "118290",
    "2046": "121841",
    "2047": "123092",
    "2048": "123885",
    "2049": "126820",
    "2050": "128946",
    "Age": "70-74"
  },
  {
    "2021": "18272",
    "2022": "18891",
    "2023": "20518",
    "2024": "22631",
    "2025": "26011",
    "2026": "28240",
    "2027": "30576",
    "2028": "32511",
    "2029": "34488",
    "2030": "36570",
    "2031": "40519",
    "2032": "44329",
    "2033": "49755",
    "2034": "54689",
    "2035": "59873",
    "2036": "63794",
    "2037": "67036",
    "2038": "69113",
    "2039": "71216",
    "2040": "72388",
    "2041": "73455",
    "2042": "74423",
    "2043": "76453",
    "2044": "77128",
    "2045": "79291",
    "2046": "82657",
    "2047": "86502",
    "2048": "90707",
    "2049": "94954",
    "2050": "98515",
    "Age": "75-79"
  },
  {
    "2021": "11947",
    "2022": "12786",
    "2023": "12492",
    "2024": "12007",
    "2025": "11872",
    "2026": "11763",
    "2027": "12352",
    "2028": "13497",
    "2029": "14958",
    "2030": "17316",
    "2031": "18905",
    "2032": "20601",
    "2033": "21991",
    "2034": "23449",
    "2035": "25099",
    "2036": "28071",
    "2037": "30949",
    "2038": "34963",
    "2039": "38601",
    "2040": "42489",
    "2041": "45523",
    "2042": "48056",
    "2043": "49808",
    "2044": "51580",
    "2045": "52738",
    "2046": "53825",
    "2047": "54809",
    "2048": "56628",
    "2049": "57371",
    "2050": "59298",
    "Age": "80-84"
  },
  {
    "2021": "5495",
    "2022": "5813",
    "2023": "6168",
    "2024": "6672",
    "2025": "6982",
    "2026": "7926",
    "2027": "8526",
    "2028": "8513",
    "2029": "8505",
    "2030": "8608",
    "2031": "9115",
    "2032": "9836",
    "2033": "10525",
    "2034": "11408",
    "2035": "12902",
    "2036": "14158",
    "2037": "15608",
    "2038": "16838",
    "2039": "18229",
    "2040": "20127",
    "2041": "22709",
    "2042": "25335",
    "2043": "25847",
    "2044": "31600",
    "2045": "35144",
    "2046": "38560",
    "2047": "41671",
    "2048": "44651",
    "2049": "47548",
    "2050": "50369",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='jami').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='jami',
                    population=population
                )

print("Navoi female data import completed successfully!")
