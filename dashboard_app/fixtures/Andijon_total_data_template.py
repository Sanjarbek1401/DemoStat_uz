import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_city_region, _ = Region.objects.get_or_create(name='Andijon', defaults={'svg_id': 'andijan'})

# Data to be imported
navoi_male_data = [
  {
    "2021": "3253528",
    "2022": "3320022",
    "2023": "3385753",
    "2024": "3450138",
    "2025": "3513297",
    "2026": "3575225",
    "2027": "3636089",
    "2028": "3696168",
    "2029": "3754934",
    "2030": "3811953",
    "2031": "3866905",
    "2032": "3919824",
    "2033": "3970809",
    "2034": "4019642",
    "2035": "4066679",
    "2036": "4111888",
    "2037": "4155631",
    "2038": "4198122",
    "2039": "4239719",
    "2040": "4280906",
    "2041": "4322268",
    "2042": "4364215",
    "2043": "4406918",
    "2044": "4450456",
    "2045": "4495021",
    "2046": "4540541",
    "2047": "4586903",
    "2048": "4624009",
    "2049": "4681611",
    "2050": "4729467",
    "Age": "Total"
  },
  {
    "2021": "372344",
    "2022": "392344",
    "2023": "407505",
    "2024": "416241",
    "2025": "419311",
    "2026": "420098",
    "2027": "417511",
    "2028": "414821",
    "2029": "412110",
    "2030": "408830",
    "2031": "404682",
    "2032": "399554",
    "2033": "393267",
    "2034": "386125",
    "2035": "378928",
    "2036": "371968",
    "2037": "365601",
    "2038": "359939",
    "2039": "355571",
    "2040": "352603",
    "2041": "361644",
    "2042": "352715",
    "2043": "365760",
    "2044": "360498",
    "2045": "366657",
    "2046": "373582",
    "2047": "380756",
    "2048": "387922",
    "2049": "394776",
    "2050": "400866",
    "Age": "0-4"
  },
  {
    "2021": "321982",
    "2022": "327939",
    "2023": "334496",
    "2024": "343129",
    "2025": "355403",
    "2026": "370093",
    "2027": "389894",
    "2028": "404910",
    "2029": "413586",
    "2030": "416662",
    "2031": "417498",
    "2032": "414987",
    "2033": "412380",
    "2034": "409754",
    "2035": "406567",
    "2036": "402520",
    "2037": "397501",
    "2038": "391332",
    "2039": "384315",
    "2040": "377242",
    "2041": "370405",
    "2042": "364154",
    "2043": "368601",
    "2044": "354328",
    "2045": "351439",
    "2046": "350538",
    "2047": "351646",
    "2048": "354707",
    "2049": "359446",
    "2050": "365592",
    "Age": "5-9"
  },
  {
    "2021": "295130",
    "2022": "298749",
    "2023": "299215",
    "2024": "303282",
    "2025": "310510",
    "2026": "320572",
    "2027": "326472",
    "2028": "332981",
    "2029": "341550",
    "2030": "353736",
    "2031": "368320",
    "2032": "388000",
    "2033": "402931",
    "2034": "411575",
    "2035": "414667",
    "2036": "415545",
    "2037": "413095",
    "2038": "410555",
    "2039": "407997",
    "2040": "404882",
    "2041": "400916",
    "2042": "395987",
    "2043": "389916",
    "2044": "383001",
    "2045": "376029",
    "2046": "369287",
    "2047": "363123",
    "2048": "357647",
    "2049": "353438",
    "2050": "350600",
    "Age": "10-14"
  },
  {
    "2021": "228546",
    "2022": "237444",
    "2023": "256402",
    "2024": "271934",
    "2025": "284942",
    "2026": "293587",
    "2027": "297148",
    "2028": "297612",
    "2029": "301684",
    "2030": "308892",
    "2031": "318906",
    "2032": "324767",
    "2033": "331245",
    "2034": "339777",
    "2035": "351912",
    "2036": "366420",
    "2037": "385988",
    "2038": "400819",
    "2039": "409416",
    "2040": "412518",
    "2041": "413438",
    "2042": "411056",
    "2043": "408594",
    "2044": "406115",
    "2045": "403081",
    "2046": "399196",
    "2047": "394352",
    "2048": "388369",
    "2049": "381545",
    "2050": "374660",
    "Age": "15-19"
  },
  {
    "2021": "234552",
    "2022": "228810",
    "2023": "221552",
    "2024": "220717",
    "2025": "224078",
    "2026": "227909",
    "2027": "236639",
    "2028": "255264",
    "2029": "270419",
    "2030": "283062",
    "2031": "291430",
    "2032": "294926",
    "2033": "295510",
    "2034": "299685",
    "2035": "306852",
    "2036": "316704",
    "2037": "322429",
    "2038": "328856",
    "2039": "337369",
    "2040": "349248",
    "2041": "363737",
    "2042": "382964",
    "2043": "397474",
    "2044": "405935",
    "2045": "409074",
    "2046": "410115",
    "2047": "407915",
    "2048": "405649",
    "2049": "403352",
    "2050": "400490",
    "Age": "20-24"
  },
  {
    "2021": "292738",
    "2022": "282959",
    "2023": "272740",
    "2024": "262961",
    "2025": "245536",
    "2026": "234150",
    "2027": "228770",
    "2028": "221808",
    "2029": "221119",
    "2030": "224484",
    "2031": "228233",
    "2032": "236675",
    "2033": "254786",
    "2034": "269459",
    "2035": "281787",
    "2036": "290030",
    "2037": "293560",
    "2038": "294216",
    "2039": "298370",
    "2040": "305419",
    "2041": "315146",
    "2042": "320863",
    "2043": "327316",
    "2044": "335734",
    "2045": "347553",
    "2046": "361532",
    "2047": "380368",
    "2048": "394586",
    "2049": "402948",
    "2050": "406139",
    "Age": "25-29"
  },
  {
    "2021": "278674",
    "2022": "284142",
    "2023": "290435",
    "2024": "293142",
    "2025": "295448",
    "2026": "289438",
    "2027": "280005",
    "2028": "270189",
    "2029": "260877",
    "2030": "244025",
    "2031": "233096",
    "2032": "228022",
    "2033": "221309",
    "2034": "220736",
    "2035": "224102",
    "2036": "227787",
    "2037": "236020",
    "2038": "253763",
    "2039": "268109",
    "2040": "280225",
    "2041": "228380",
    "2042": "291939",
    "2043": "292672",
    "2044": "296849",
    "2045": "303849",
    "2046": "313501",
    "2047": "319196",
    "2048": "325619",
    "2049": "333925",
    "2050": "345545",
    "Age": "30-34"
  },
  {
    "2021": "245158",
    "2022": "253961",
    "2023": "259877",
    "2024": "263537",
    "2025": "268719",
    "2026": "274637",
    "2027": "279954",
    "2028": "286138",
    "2029": "288819",
    "2030": "291195",
    "2031": "285438",
    "2032": "276371",
    "2033": "266939",
    "2034": "258034",
    "2035": "241673",
    "2036": "231125",
    "2037": "226302",
    "2038": "219797",
    "2039": "219322",
    "2040": "222694",
    "2041": "226343",
    "2042": "234431",
    "2043": "251888",
    "2044": "265985",
    "2045": "277935",
    "2046": "286020",
    "2047": "289601",
    "2048": "290388",
    "2049": "294560",
    "2050": "301485",
    "Age": "35-39"
  },
  {
    "2021": "200101",
    "2022": "206399",
    "2023": "213014",
    "2024": "220694",
    "2025": "231356",
    "2026": "241227",
    "2027": "249831",
    "2028": "255637",
    "2029": "259248",
    "2030": "264370",
    "2031": "270220",
    "2032": "275483",
    "2033": "281627",
    "2034": "284323",
    "2035": "286774",
    "2036": "281234",
    "2037": "272468",
    "2038": "263348",
    "2039": "254763",
    "2040": "238809",
    "2041": "228572",
    "2042": "223954",
    "2043": "217636",
    "2044": "217252",
    "2045": "220639",
    "2046": "224267",
    "2047": "232240",
    "2048": "249451",
    "2049": "263334",
    "2050": "275133",
    "Age": "40-44"
  },
  {
    "2021": "190159",
    "2022": "189443",
    "2023": "189370",
    "2024": "191878",
    "2025": "193499",
    "2026": "196340",
    "2027": "202516",
    "2028": "209002",
    "2029": "216533",
    "2030": "226998",
    "2031": "236698",
    "2032": "245170",
    "2033": "250909",
    "2034": "254504",
    "2035": "259596",
    "2036": "265409",
    "2037": "270641",
    "2038": "276744",
    "2039": "279451",
    "2040": "281967",
    "2041": "276633",
    "2042": "268144",
    "2043": "259313",
    "2044": "251015",
    "2045": "235449",
    "2046": "225503",
    "2047": "221072",
    "2048": "214930",
    "2049": "214623",
    "2050": "218010",
    "Age": "45-49"
  },
  {
    "2021": "165518",
    "2022": "171969",
    "2023": "176737",
    "2024": "181073",
    "2025": "183100",
    "2026": "185125",
    "2027": "184469",
    "2028": "184457",
    "2029": "186960",
    "2030": "188601",
    "2031": "191442",
    "2032": "197526",
    "2033": "203904",
    "2034": "211304",
    "2035": "221571",
    "2036": "231099",
    "2037": "239434",
    "2038": "245100",
    "2039": "248677",
    "2040": "253740",
    "2041": "259524",
    "2042": "264733",
    "2043": "270792",
    "2044": "273511",
    "2045": "276097",
    "2046": "270986",
    "2047": "262790",
    "2048": "254259",
    "2049": "246242",
    "2050": "231097",
    "Age": "50-54"
  },
  {
    "2021": "147967",
    "2022": "148087",
    "2023": "150371",
    "2024": "151000",
    "2025": "154177",
    "2026": "158846",
    "2027": "165090",
    "2028": "169716",
    "2029": "173922",
    "2030": "175941",
    "2031": "177996",
    "2032": "177467",
    "2033": "177576",
    "2034": "180099",
    "2035": "181790",
    "2036": "184661",
    "2037": "190637",
    "2038": "196888",
    "2039": "204129",
    "2040": "214143",
    "2041": "223455",
    "2042": "231612",
    "2043": "237178",
    "2044": "240732",
    "2045": "245767",
    "2046": "251521",
    "2047": "256701",
    "2048": "262677",
    "2049": "265380",
    "2050": "268023",
    "Age": "55-59"
  },
  {
    "2021": "121011",
    "2022": "127521",
    "2023": "130364",
    "2024": "134094",
    "2025": "136540",
    "2026": "137879",
    "2027": "138077",
    "2028": "140342",
    "2029": "141037",
    "2030": "144178",
    "2031": "148709",
    "2032": "154701",
    "2033": "159168",
    "2034": "163221",
    "2035": "165256",
    "2036": "167371",
    "2037": "167035",
    "2038": "167322",
    "2039": "169871",
    "2040": "171633",
    "2041": "174543",
    "2042": "180366",
    "2043": "186440",
    "2044": "193464",
    "2045": "203123",
    "2046": "212129",
    "2047": "220024",
    "2048": "225427",
    "2049": "228922",
    "2050": "233885",
    "Age": "60-64"
  },
  {
    "2021": "74786",
    "2022": "78933",
    "2023": "86889",
    "2024": "93800",
    "2025": "101291",
    "2026": "107611",
    "2027": "113505",
    "2028": "116174",
    "2029": "119655",
    "2030": "122047",
    "2031": "123474",
    "2032": "123840",
    "2033": "126117",
    "2034": "126948",
    "2035": "130063",
    "2036": "134423",
    "2037": "140085",
    "2038": "144353",
    "2039": "148209",
    "2040": "150273",
    "2041": "152456",
    "2042": "152378",
    "2043": "152894",
    "2044": "155473",
    "2045": "157325",
    "2046": "160270",
    "2047": "165863",
    "2048": "171675",
    "2049": "178371",
    "2050": "187504",
    "Age": "65-69"
  },
  {
    "2021": "43251",
    "2022": "48261",
    "2023": "52189",
    "2024": "55858",
    "2025": "57973",
    "2026": "62623",
    "2027": "66277",
    "2028": "73163",
    "2029": "79125",
    "2030": "85622",
    "2031": "91173",
    "2032": "96369",
    "2033": "98873",
    "2034": "102081",
    "2035": "104417",
    "2036": "105949",
    "2037": "106527",
    "2038": "108794",
    "2039": "109772",
    "2040": "112810",
    "2041": "116921",
    "2042": "122142",
    "2043": "126146",
    "2044": "129738",
    "2045": "131811",
    "2046": "134036",
    "2047": "134239",
    "2048": "134988",
    "2049": "137536",
    "2050": "139436",
    "Age": "70-74"
  },
  {
    "2021": "21204",
    "2022": "21210",
    "2023": "22875",
    "2024": "25448",
    "2025": "29753",
    "2026": "32630",
    "2027": "36543",
    "2028": "39541",
    "2029": "42387",
    "2030": "44226",
    "2031": "48018",
    "2032": "51092",
    "2033": "56700",
    "2034": "61532",
    "2035": "66841",
    "2036": "71462",
    "2037": "75794",
    "2038": "78062",
    "2039": "80885",
    "2040": "83083",
    "2041": "84656",
    "2042": "85415",
    "2043": "87591",
    "2044": "88686",
    "2045": "91559",
    "2046": "95296",
    "2047": "99892",
    "2048": "103484",
    "2049": "106650",
    "2050": "108638",
    "Age": "75-79"
  },
  {
    "2021": "14687",
    "2022": "15665",
    "2023": "14883",
    "2024": "13725",
    "2025": "13628",
    "2026": "13357",
    "2027": "13672",
    "2028": "14740",
    "2029": "16472",
    "2030": "19471",
    "2031": "21482",
    "2032": "24220",
    "2033": "26282",
    "2034": "28289",
    "2035": "29780",
    "2036": "32608",
    "2037": "34988",
    "2038": "39146",
    "2039": "42713",
    "2040": "46664",
    "2041": "50180",
    "2042": "53488",
    "2043": "55396",
    "2044": "57702",
    "2045": "59631",
    "2046": "61124",
    "2047": "61980",
    "2048": "63918",
    "2049": "65019",
    "2050": "67535",
    "Age": "80-84"
  },
  {
    "2021": "5720",
    "2022": "6189",
    "2023": "6840",
    "2024": "7623",
    "2025": "8035",
    "2026": "9102",
    "2027": "9819",
    "2028": "9673",
    "2029": "9431",
    "2030": "9612",
    "2031": "10089",
    "2032": "10653",
    "2033": "11287",
    "2034": "12194",
    "2035": "14103",
    "2036": "15574",
    "2037": "17524",
    "2038": "19088",
    "2039": "20781",
    "2040": "22772",
    "2041": "25319",
    "2042": "27873",
    "2043": "31313",
    "2044": "34439",
    "2045": "38004",
    "2046": "41639",
    "2047": "45147",
    "2048": "48312",
    "2049": "51543",
    "2050": "54831",
    "Age": "85+"
  }
]

# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_city_region, gender='jami').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_city_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='jami',
                    population=population
                )

print("Navoi female data import completed successfully!")
