import os
import django

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from dashboard_app.models import Region, StatisticsData
from django.db import transaction

# First, get or create the Navoi region
tashkent_region, _ = Region.objects.get_or_create(name='Toshkent Shahri', defaults={'svg_id': 'tashkent_city'})

# Data to be imported
navoi_male_data =[
  {
    "2021": "1403097",
    "2022": "1433384",
    "2023": "1463997",
    "2024": "1494644",
    "2025": "1525311",
    "2026": "1555858",
    "2027": "1586174",
    "2028": "1616296",
    "2029": "1646041",
    "2030": "1675246",
    "2031": "1703725",
    "2032": "1731372",
    "2033": "1758115",
    "2034": "1783805",
    "2035": "1808571",
    "2036": "1832407",
    "2037": "1855493",
    "2038": "1877902",
    "2039": "1899782",
    "2040": "1921347",
    "2041": "1942865",
    "2042": "1964524",
    "2043": "1986432",
    "2044": "2008654",
    "2045": "2031324",
    "2046": "2054441",
    "2047": "2077988",
    "2048": "2101978",
    "2049": "2126312",
    "2050": "2150919",
    "Age": "Total"
  },
  {
    "2021": "140526",
    "2022": "149002",
    "2023": "157221",
    "2024": "163304",
    "2025": "167756",
    "2026": "169283",
    "2027": "170545",
    "2028": "171327",
    "2029": "171734",
    "2030": "171612",
    "2031": "170892",
    "2032": "169565",
    "2033": "167506",
    "2034": "164741",
    "2035": "161556",
    "2036": "158148",
    "2037": "154801",
    "2038": "151674",
    "2039": "149066",
    "2040": "147060",
    "2041": "145914",
    "2042": "145657",
    "2043": "146309",
    "2044": "147805",
    "2045": "150055",
    "2046": "152803",
    "2047": "155850",
    "2048": "159091",
    "2049": "162389",
    "2050": "165543",
    "Age": "0-4"
  },
  {
    "2021": "121955",
    "2022": "124160",
    "2023": "126807",
    "2024": "130655",
    "2025": "135653",
    "2026": "143218",
    "2027": "151576",
    "2028": "159686",
    "2029": "165693",
    "2030": "170112",
    "2031": "171648",
    "2032": "172940",
    "2033": "173759",
    "2034": "174213",
    "2035": "174148",
    "2036": "173496",
    "2037": "172250",
    "2038": "170284",
    "2039": "167623",
    "2040": "164550",
    "2041": "161255",
    "2042": "158018",
    "2043": "154994",
    "2044": "152478",
    "2045": "150550",
    "2046": "149465",
    "2047": "149250",
    "2048": "149929",
    "2049": "151435",
    "2050": "153682",
    "Age": "5-9"
  },
  {
    "2021": "120771",
    "2022": "121039",
    "2023": "119948",
    "2024": "118887",
    "2025": "120898",
    "2026": "124106",
    "2027": "126320",
    "2028": "128965",
    "2029": "132784",
    "2030": "137717",
    "2031": "145180",
    "2032": "153423",
    "2033": "161431",
    "2034": "167369",
    "2035": "171758",
    "2036": "173300",
    "2037": "174612",
    "2038": "175457",
    "2039": "175944",
    "2040": "175922",
    "2041": "175323",
    "2042": "174138",
    "2043": "172246",
    "2044": "169668",
    "2045": "166682",
    "2046": "163477",
    "2047": "160327",
    "2048": "157385",
    "2049": "154940",
    "2050": "153072",
    "Age": "10-14"
  },
  {
    "2021": "100141",
    "2022": "104550",
    "2023": "110807",
    "2024": "116598",
    "2025": "120421",
    "2026": "122110",
    "2027": "122408",
    "2028": "121371",
    "2029": "120361",
    "2030": "122383",
    "2031": "125577",
    "2032": "127777",
    "2033": "130402",
    "2034": "134187",
    "2035": "139064",
    "2036": "146443",
    "2037": "154584",
    "2038": "162495",
    "2039": "168362",
    "2040": "172715",
    "2041": "174259",
    "2042": "175588",
    "2043": "176459",
    "2044": "176977",
    "2045": "176994",
    "2046": "176442",
    "2047": "175314",
    "2048": "173486",
    "2049": "170981",
    "2050": "168072",
    "Age": "15-19"
  },
  {
    "2021": "95240",
    "2022": "94926",
    "2023": "95089",
    "2024": "97517",
    "2025": "99780",
    "2026": "103580",
    "2027": "107943",
    "2028": "114113",
    "2029": "119810",
    "2030": "123569",
    "2031": "125238",
    "2032": "125568",
    "2033": "124604",
    "2034": "123666",
    "2035": "125700",
    "2036": "128867",
    "2037": "131042",
    "2038": "133636",
    "2039": "137374",
    "2040": "142177",
    "2041": "149440",
    "2042": "157434",
    "2043": "165204",
    "2044": "170969",
    "2045": "175271",
    "2046": "176818",
    "2047": "178173",
    "2048": "179078",
    "2049": "179640",
    "2050": "179709",
    "Age": "20-24"
  },
  {
    "2021": "105166",
    "2022": "105304",
    "2023": "105240",
    "2024": "104199",
    "2025": "102562",
    "2026": "101209",
    "2027": "101057",
    "2028": "101323",
    "2029": "103779",
    "2030": "106022",
    "2031": "109757",
    "2032": "114011",
    "2033": "120030",
    "2034": "125583",
    "2035": "129250",
    "2036": "130902",
    "2037": "131277",
    "2038": "130404",
    "2039": "129545",
    "2040": "131586",
    "2041": "134716",
    "2042": "136861",
    "2043": "139422",
    "2044": "143102",
    "2045": "147808",
    "2046": "154917",
    "2047": "162724",
    "2048": "170320",
    "2049": "175963",
    "2050": "180208",
    "Age": "25-29"
  },
  {
    "2021": "112287",
    "2022": "109752",
    "2023": "108694",
    "2024": "109607",
    "2025": "110330",
    "2026": "110177",
    "2027": "110446",
    "2028": "110510",
    "2029": "109615",
    "2030": "108133",
    "2031": "106912",
    "2032": "106849",
    "2033": "107157",
    "2034": "109596",
    "2035": "111794",
    "2036": "115444",
    "2037": "119575",
    "2038": "125433",
    "2039": "130841",
    "2040": "134428",
    "2041": "136073",
    "2042": "136500",
    "2043": "135717",
    "2044": "134938",
    "2045": "136986",
    "2046": "140087",
    "2047": "142212",
    "2048": "144746",
    "2049": "148368",
    "2050": "152971",
    "Age": "30-34"
  },
  {
    "2021": "120484",
    "2022": "122900",
    "2023": "124472",
    "2024": "120812",
    "2025": "118163",
    "2026": "115183",
    "2027": "112857",
    "2028": "111940",
    "2029": "112920",
    "2030": "113700",
    "2031": "113621",
    "2032": "113958",
    "2033": "114097",
    "2034": "113308",
    "2035": "111951",
    "2036": "110839",
    "2037": "110848",
    "2038": "111186",
    "2039": "113604",
    "2040": "115755",
    "2041": "119327",
    "2042": "123345",
    "2043": "129055",
    "2044": "134332",
    "2045": "137850",
    "2046": "139498",
    "2047": "139982",
    "2048": "139291",
    "2049": "138588",
    "2050": "140641",
    "Age": "35-39"
  },
  {
    "2021": "101577",
    "2022": "105255",
    "2023": "108273",
    "2024": "113563",
    "2025": "117063",
    "2026": "120924",
    "2027": "123304",
    "2028": "124920",
    "2029": "121447",
    "2030": "118993",
    "2031": "116197",
    "2032": "114025",
    "2033": "113205",
    "2034": "114226",
    "2035": "115044",
    "2036": "115022",
    "2037": "115412",
    "2038": "115613",
    "2039": "114912",
    "2040": "113660",
    "2041": "112638",
    "2042": "112706",
    "2043": "113071",
    "2044": "115472",
    "2045": "117592",
    "2046": "121101",
    "2047": "125031",
    "2048": "130617",
    "2049": "135788",
    "2050": "139256",
    "Age": "40-44"
  },
  {
    "2021": "92255",
    "2022": "92608",
    "2023": "92136",
    "2024": "95244",
    "2025": "98069",
    "2026": "101101",
    "2027": "104692",
    "2028": "107620",
    "2029": "112780",
    "2030": "116187",
    "2031": "119970",
    "2032": "122318",
    "2033": "123955",
    "2034": "120653",
    "2035": "118367",
    "2036": "115743",
    "2037": "113715",
    "2038": "112985",
    "2039": "114036",
    "2040": "114887",
    "2041": "114918",
    "2042": "115357",
    "2043": "115611",
    "2044": "114988",
    "2045": "113830",
    "2046": "112892",
    "2047": "113018",
    "2048": "113417",
    "2049": "115806",
    "2050": "117902",
    "Age": "45-49"
  },
  {
    "2021": "80463",
    "2022": "84868",
    "2023": "88102",
    "2024": "88543",
    "2025": "89771",
    "2026": "90520",
    "2027": "90917",
    "2028": "90509",
    "2029": "93545",
    "2030": "96305",
    "2031": "99264",
    "2032": "102768",
    "2033": "105607",
    "2034": "110634",
    "2035": "113959",
    "2036": "117667",
    "2037": "119988",
    "2038": "121633",
    "2039": "118507",
    "2040": "116389",
    "2041": "113943",
    "2042": "112068",
    "2043": "111432",
    "2044": "112513",
    "2045": "113400",
    "2046": "113489",
    "2047": "113977",
    "2048": "114284",
    "2049": "113738",
    "2050": "112674",
    "Age": "50-54"
  },
  {
    "2021": "67450",
    "2022": "67354",
    "2023": "69082",
    "2024": "70604",
    "2025": "73758",
    "2026": "77645",
    "2027": "81833",
    "2028": "84938",
    "2029": "85383",
    "2030": "86615",
    "2031": "87401",
    "2032": "87863",
    "2033": "87552",
    "2034": "90503",
    "2035": "93201",
    "2036": "96087",
    "2037": "99492",
    "2038": "102230",
    "2039": "107099",
    "2040": "110333",
    "2041": "113951",
    "2042": "116235",
    "2043": "117870",
    "2044": "114957",
    "2045": "113036",
    "2046": "110809",
    "2047": "109120",
    "2048": "108598",
    "2049": "109708",
    "2050": "110631",
    "Age": "55-59"
  },
  {
    "2021": "56122",
    "2022": "58250",
    "2023": "59509",
    "2024": "61394",
    "2025": "62867",
    "2026": "62844",
    "2027": "62827",
    "2028": "64505",
    "2029": "65998",
    "2030": "68977",
    "2031": "72615",
    "2032": "76520",
    "2033": "79464",
    "2034": "79928",
    "2035": "81173",
    "2036": "82015",
    "2037": "82565",
    "2038": "82389",
    "2039": "85223",
    "2040": "87838",
    "2041": "90629",
    "2042": "93897",
    "2043": "96504",
    "2044": "101160",
    "2045": "104277",
    "2046": "107771",
    "2047": "110000",
    "2048": "111604",
    "2049": "108967",
    "2050": "107288",
    "Age": "60-64"
  },
  {
    "2021": "40127",
    "2022": "41588",
    "2023": "43969",
    "2024": "45556",
    "2025": "46904",
    "2026": "49315",
    "2027": "51241",
    "2028": "52417",
    "2029": "54165",
    "2030": "55527",
    "2031": "55615",
    "2032": "55710",
    "2033": "57327",
    "2034": "58787",
    "2035": "61552",
    "2036": "64893",
    "2037": "68462",
    "2038": "71210",
    "2039": "71712",
    "2040": "72964",
    "2041": "73866",
    "2042": "74512",
    "2043": "74495",
    "2044": "77173",
    "2045": "79677",
    "2046": "82336",
    "2047": "85425",
    "2048": "87875",
    "2049": "92247",
    "2050": "95203",
    "Age": "65-69"
  },
  {
    "2021": "27600",
    "2022": "29116",
    "2023": "29992",
    "2024": "31064",
    "2025": "31892",
    "2026": "33006",
    "2027": "34288",
    "2028": "36327",
    "2029": "37737",
    "2030": "38926",
    "2031": "41041",
    "2032": "42757",
    "2033": "43858",
    "2034": "45459",
    "2035": "46704",
    "2036": "46916",
    "2037": "47131",
    "2038": "48659",
    "2039": "50066",
    "2040": "52570",
    "2041": "55560",
    "2042": "58732",
    "2043": "61236",
    "2044": "61769",
    "2045": "63001",
    "2046": "63944",
    "2047": "64669",
    "2048": "64816",
    "2049": "67280",
    "2050": "69622",
    "Age": "70-74"
  },
  {
    "2021": "11821",
    "2022": "13259",
    "2023": "15092",
    "2024": "17363",
    "2025": "19222",
    "2026": "20293",
    "2027": "21465",
    "2028": "22157",
    "2029": "23073",
    "2030": "23792",
    "2031": "24737",
    "2032": "25827",
    "2033": "27486",
    "2034": "28696",
    "2035": "29705",
    "2036": "31477",
    "2037": "32941",
    "2038": "33935",
    "2039": "35338",
    "2040": "36413",
    "2041": "36730",
    "2042": "37046",
    "2043": "38434",
    "2044": "39749",
    "2045": "41919",
    "2046": "44468",
    "2047": "47139",
    "2048": "49317",
    "2049": "49842",
    "2050": "50999",
    "Age": "75-79"
  },
  {
    "2021": "6781",
    "2022": "6812",
    "2023": "6630",
    "2024": "6529",
    "2025": "6627",
    "2026": "7356",
    "2027": "8319",
    "2028": "9500",
    "2029": "10967",
    "2030": "12177",
    "2031": "12932",
    "2032": "13761",
    "2033": "14278",
    "2034": "15006",
    "2035": "15594",
    "2036": "16339",
    "2037": "17198",
    "2038": "18433",
    "2039": "19390",
    "2040": "20179",
    "2041": "21541",
    "2042": "22690",
    "2043": "23521",
    "2044": "24656",
    "2045": "25520",
    "2046": "25895",
    "2047": "26267",
    "2048": "27439",
    "2049": "28575",
    "2050": "30308",
    "Age": "80-84"
  },
  {
    "2021": "2331",
    "2022": "2642",
    "2023": "2932",
    "2024": "3207",
    "2025": "3576",
    "2026": "3988",
    "2027": "4134",
    "2028": "4167",
    "2029": "4250",
    "2030": "4502",
    "2031": "5129",
    "2032": "5734",
    "2033": "6397",
    "2034": "7251",
    "2035": "8052",
    "2036": "8809",
    "2037": "9601",
    "2038": "10246",
    "2039": "11140",
    "2040": "11921",
    "2041": "12782",
    "2042": "13741",
    "2043": "14851",
    "2044": "15947",
    "2045": "16874",
    "2046": "18228",
    "2047": "19508",
    "2048": "20686",
    "2049": "22058",
    "2050": "23139",
    "Age": "85+"
  }
]
# Convert age ranges to min/max values
def get_age_min_max(age_str):
    if age_str == "Total":
        return 0, None  # For total population, use 0 as min age
    elif age_str == "85+":
        return 85, None
    elif '-' in age_str:
        age_parts = age_str.split('-')
        return int(age_parts[0]), int(age_parts[1])
    return None, None

# Delete existing Navoi male data
StatisticsData.objects.filter(region=tashkent_region, gender='erkak').delete()

# Import new data
with transaction.atomic():
    for entry in navoi_male_data:
        age_min, age_max = get_age_min_max(entry['Age'])
        for year in range(2021, 2051):
            year_str = str(year)
            if year_str in entry:
                population = int(entry[year_str])
                StatisticsData.objects.create(
                    region=tashkent_region,
                    year=year,
                    age_min=age_min,
                    age_max=age_max,
                    gender='erkak',
                    population=population
                )

print("Navoi male data import completed successfully!")
